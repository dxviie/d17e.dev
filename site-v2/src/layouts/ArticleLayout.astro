---
import type {CollectionEntry} from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Markdown from '../components/Markdown.astro';
import MediaAsset from '../components/MediaAsset.astro';
import '../styles/markdown.css';

type Props = CollectionEntry<'articles'>['data'];

const {title, publishDate, dateUpdated, cover, body, description} = Astro.props;
---

<html lang="en">
<head>
  <BaseHead title={title} description={description || ''}/>
</head>

<body>
<Header/>
<main>
  <article>
    {cover && (
            <div class="hero-media">
              <MediaAsset
                      id={cover.id}
                      title={cover.title}
                      alt={cover.title || title}
                      type={cover.type}
                      filenameDownload={cover.filenameDownload}
                      isHero={true}
              />
            </div>
    )}

    <div class="article-content">
      <div class="title-section">
        <span class="date">
          {publishDate &&
                  <FormattedDate date={publishDate}/>}
          {dateUpdated && (
                  <span class="last-updated">
                  Â· Last updated: <FormattedDate date={dateUpdated}/>
                </span>
          )}
        </span>
        <h1>{title}</h1>

        {description && (
                <div class="description">
                  <p>{description}</p>
                </div>
        )}
      </div>

      {/* Parse Markdown content */}
      <Markdown content={body}/>
    </div>
  </article>

  <slot/>
</main>
<Footer/>
</body>
</html>

<style>
    main {
        width: 90%;
        max-width: 960px;
        margin: 3rem auto 0;
        padding: 2rem 1rem;
        min-height: calc(100vh - 12.5rem);
    }

    .hero-media {
        width: 100%;
        margin-bottom: 2rem;
    }

    .article-content {
        color: var(--color);
    }

    .title-section {
        margin-bottom: 2rem;
    }

    .title-section h1 {
        font-family: 'nudica_monobold', serif;
        margin: 0.5rem 0;
        font-size: 2.5rem;
        line-height: 1.2;
    }

    .date {
        font-family: 'nudica_monolight', serif;
        background-color: var(--color);
        color: var(--bg-color);
        padding: 0.2rem 0.5rem;
        font-size: 0.9rem;
    }

    .last-updated {
        font-style: italic;
        font-size: 0.85rem;
    }

    .description {
        font-family: 'nudica_monolight', serif;
        margin-top: 1rem;
        padding: 1rem;
        background-color: var(--bg-code);
        border-radius: 8px;
    }

    .description p {
        margin: 0;
    }

    @media (max-width: 768px) {
        .title-section h1 {
            font-size: 2rem;
        }
    }
</style>

<script>
  // Add click handler to make video controls appear when clicking on video
  document.addEventListener('DOMContentLoaded', () => {
    const videos = document.querySelectorAll('video');

    videos.forEach(video => {
      video.addEventListener('click', () => {
        video.controls = !video.controls;
      });
    });
  });
</script>