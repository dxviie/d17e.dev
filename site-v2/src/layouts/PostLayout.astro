---
import type {CollectionEntry} from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Markdown from '../components/Markdown.astro';
import '../styles/markdown.css';

type Props = CollectionEntry<'posts'>['data'];

const {title, publishDate, dateUpdated, cover, body, link, linkDescription} = Astro.props;

// Determine if the cover is a video by checking the file type
const isVideo = cover?.type?.startsWith('video/') ||
  cover?.filenameDownload?.endsWith('.mp4') ||
  cover?.filenameDownload?.endsWith('.mov');

// Get the appropriate media type
const mediaType = cover?.type ||
  (cover?.filenameDownload?.endsWith('.mp4') ? 'video/mp4' :
    cover?.filenameDownload?.endsWith('.mov') ? 'video/quicktime' : '');
---

<html lang="en">
<head>
  <BaseHead title={title} description={linkDescription || ''}/>
</head>

<body>
<Header/>
<main>
  <article>
    {cover && (
            <div class="hero-media">
              {isVideo ? (
                      <div class="hero-video">
                        <video
                                autoplay
                                muted
                                loop
                                playsinline
                                controls={false}
                        >
                          <source
                                  src={`${import.meta.env.DIRECTUS_URL}/assets/${cover.id}`}
                                  type={mediaType}
                          />
                        </video>
                      </div>
              ) : (
                      <div class="hero-image">
                        <img
                                src={`${import.meta.env.DIRECTUS_URL}/assets/${cover.id}?width=1200&height=600&fit=cover`}
                                alt={cover.title || title}
                        />
                      </div>
              )}
            </div>
    )}

    <div class="post-content">
      <div class="title-section">
        <span class="date">
          {publishDate &&
                  <FormattedDate date={publishDate}/>}
          {dateUpdated && (
                  <span class="last-updated">
                  Â· Last updated: <FormattedDate date={dateUpdated}/>
                </span>
          )}
        </span>
        <h1>{title}</h1>
      </div>

      {/* Parse Markdown content */}
      <Markdown content={body}/>

      {link && (
              <span class="link-section">
                ðŸ”—
                <a href={link} target="_blank" rel="noopener noreferrer">{linkDescription || link}</a>
              </span>
      )}
    </div>
  </article>

  <slot/>
</main>
<Footer/>
</body>
</html>

<style>
    main {
        width: 90%;
        max-width: 960px;
        margin: 3rem auto 0;
        padding: 2rem 1rem;
        min-height: calc(100vh - 12.5rem);
    }

    .hero-media {
        width: 100%;
        margin-bottom: 2rem;
    }

    .hero-image img {
        display: block;
        width: 100%;
        max-height: 500px;
        object-fit: cover;
        border-radius: 12px;
        box-shadow: var(--box-shadow);
    }

    .hero-video {
        width: 100%;
        border-radius: 12px;
        box-shadow: var(--box-shadow);
        overflow: hidden;
    }

    .hero-video video {
        display: block;
        width: 100%;
        border-radius: 12px;
    }

    .post-content {
        color: var(--color);
    }

    .title-section {
        margin-bottom: 2rem;
    }

    .title-section h1 {
        font-family: 'nudica_monobold', serif;
        margin: 0.5rem 0;
        font-size: 2.5rem;
        line-height: 1.2;
    }

    .date {
        font-family: 'nudica_monolight', serif;
        background-color: var(--color);
        color: var(--bg-color);
        padding: 0.2rem 0.5rem;
        font-size: 0.9rem;
    }

    .last-updated {
        font-style: italic;
        font-size: 0.85rem;
    }

    .link-section {
        display: inline-block;
        margin: 1.5rem 0;
        padding: 1rem;
        background-color: var(--bg-code);
        border-radius: 8px;
    }

    .link-section a {
        color: var(--accent-color);
        text-decoration: none;
        word-break: break-all;
    }

    .link-section a:hover {
        text-decoration: underline;
    }

    @media (max-width: 768px) {
        .link-section {
            flex-direction: column;
            align-items: flex-start;
        }

        .title-section h1 {
            font-size: 2rem;
        }
    }
</style>

<script>
  // Add click handler to make video controls appear when clicking on video
  document.addEventListener('DOMContentLoaded', () => {
    const videos = document.querySelectorAll('video');

    videos.forEach(video => {
      video.addEventListener('click', () => {
        video.controls = !video.controls;
      });
    });
  });
</script>