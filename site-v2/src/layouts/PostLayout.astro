---
import type {CollectionEntry} from 'astro:content';
import {ClientRouter} from 'astro:transitions';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Markdown from '../components/Markdown.astro';
import MediaAsset from '../components/MediaAsset.astro';
import '../styles/markdown.css';
import SocialLinks from "../components/SocialLinks.astro";
import FindMeOn from "../components/FindMeOn.astro";
import PostPrevNext from "../components/PostPrevNext.astro";
import PostPrevNextMini from "../components/PostPrevNextMini.astro";

type Props = CollectionEntry<'posts'>['data'];

const {slug, title, publishDate, dateUpdated, cover, body, link, linkDescription} = Astro.props;
---

<html lang="en">
<head>
  <BaseHead title={title} description={linkDescription || ''}/>
  <ClientRouter/>
</head>

<body>
<Header/>
<main>
  <article>
    {cover && (
            <div class="hero-media">
              <MediaAsset
                      id={cover.id}
                      title={cover.title}
                      alt={cover.title || title}
                      type={cover.type}
                      filenameDownload={cover.filenameDownload}
                      isHero={true}
              />
              <PostPrevNextMini currentSlug={slug}/>
            </div>
    )}

    <div class="post-content">
      <div class="title-section">
        <span class="date">
          {publishDate &&
                  <FormattedDate date={publishDate}/>}
          {dateUpdated && (
                  <span class="last-updated">
                  Â· Last updated: <FormattedDate date={dateUpdated}/>
                </span>
          )}
        </span>
        <h1>{title}</h1>
      </div>

      {/* Parse Markdown content */}
      <Markdown content={body}/>

      {link && (
              <span class="link-section">
                ðŸ”—
                <a href={link} target="_blank" rel="noopener noreferrer">{linkDescription || link}</a>
              </span>
      )}
    </div>
  </article>

  <slot/>
</main>
<FindMeOn/>
<Footer/>
</body>
</html>

<style>
    main {
        width: 90%;
        max-width: 960px;
        margin: 3rem auto 0;
        padding: 2rem 1rem;
        min-height: calc(100vh - 12.5rem);
    }

    .hero-media {
        width: 100%;
        margin-bottom: 0;
    }

    .post-content {
        color: var(--color);
    }

    .title-section {
        margin-bottom: 2rem;
    }

    .title-section h1 {
        font-family: 'nudica_monobold', serif;
        margin: 0.5rem 0;
        font-size: 2.5rem;
        line-height: 1.2;
    }

    .date {
        font-family: 'nudica_monolight', serif;
        background-color: var(--color);
        color: var(--bg-color);
        padding: 0.2rem 0.5rem;
        font-size: 0.9rem;
    }

    .last-updated {
        font-style: italic;
        font-size: 0.85rem;
    }

    .link-section {
        font-family: 'nudica_monolight', serif;
        display: inline-block;
        margin: 1.5rem 0;
        padding: 1rem;
        background-color: var(--bg-code);
        border-radius: 8px;
    }

    .link-section a {
        color: var(--accent-color);
        text-decoration: none;
        word-break: break-all;
    }

    .link-section a:hover {
        text-decoration: underline;
    }

    @media (max-width: 768px) {
        .link-section {
            flex-direction: column;
            align-items: flex-start;
        }

        .title-section h1 {
            font-size: 2rem;
        }
    }

    article {
        display: flex;
        flex-direction: column;
    }

    @media (min-width: 1200px) {
        main {
            max-width: 90vw;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .hero-media {
            max-width: 700px;
        }

        .post-content {
            max-width: 700px;
        }

        article {
            justify-content: center;
            flex-direction: row;
            gap: 2rem;
        }
    }
</style>

<script>
  // Add click handler to make video controls appear when clicking on video
  document.addEventListener('DOMContentLoaded', () => {
    const videos = document.querySelectorAll('video');

    videos.forEach(video => {
      video.addEventListener('click', () => {
        video.controls = !video.controls;
      });
    });
  });
</script>