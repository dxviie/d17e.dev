---
import type {CollectionEntry} from 'astro:content';
import {ClientRouter} from 'astro:transitions';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Markdown from '../components/Markdown.astro';
import MediaAsset from '../components/MediaAsset.astro';
import '../styles/markdown.css';
import FindMeOn from "../components/FindMeOn.astro";
import ProjectPrevNextMini from "../components/ProjectPrevNextMini.astro";

type Props = CollectionEntry<'projects'>['data'];

const {
  slug,
  name,
  startDate,
  endDate,
  description,
  dateCreated,
  dateUpdated,
  cover,
  body,
  link,
  linkDescription,
  relatedPosts = [],
  relatedArticles = []
} = Astro.props;

let imageUrl = `https://d17e.dev/assets/${cover.id}.webp`;
---

<html lang="en">
<head>
  <BaseHead title={name} description={linkDescription || ''} image={imageUrl}/>
  <ClientRouter/>
</head>

<body>
<Header/>
<main>
  <article>
    {cover && (
            <div class="hero-media">
              <MediaAsset
                      id={cover.id}
                      title={cover.title}
                      alt={cover.title || name}
                      type={cover.type}
                      filenameDownload={cover.filenameDownload}
                      isHero={true}
              />
              <ProjectPrevNextMini currentSlug={slug}/>
            </div>
    )}

    <div class="project-content">
      <div class="title-section">
        <span class="dates">
          {startDate && (
                  <span class="date-range">
                    <FormattedDate date={startDate}/>
                    {endDate && (
                            <> -
                              <FormattedDate date={endDate}/>
                            </>
                    )}
                  </span>
          )}
          {dateUpdated && (
                  <span class="last-updated">
                  Â· Last updated: <FormattedDate date={dateUpdated}/>
                </span>
          )}
        </span>
        <h1>{name}</h1>
      </div>

      {/* Parse Markdown content */}
      <Markdown content={body}/>

      {link && (
              <span class="link-section">
                ðŸ”—
                <a href={link} target="_blank" rel="noopener noreferrer">{linkDescription || link}</a>
              </span>
      )}

      {/* Related Content Section */}
      {(relatedPosts.length > 0 || relatedArticles.length > 0) && (
              <div class="related-content-section">
                <h2 class="related-content-title">Related Content</h2>

                {relatedPosts.length > 0 && (
                        <div class="related-posts">
                          <h3>Media</h3>
                          <div class="posts-grid-container">
                            {relatedPosts.map((post) => (
                                    <div class="post-card">
                                      <a href={`/posts/${post.slug}/`} title={post.title}>
                                        {post.cover && (
                                                <div class="post-card-image">
                                                  <img
                                                          src={`/assets/${post.cover.id}.webp`}
                                                          alt={post.title}
                                                          loading="lazy"
                                                  />
                                                </div>
                                        )}
                                      </a>
                                    </div>
                            ))}
                          </div>
                        </div>
                )}

                {relatedArticles.length > 0 && (
                        <div class="related-articles">
                          <h3>Articles</h3>
                          <ul class="related-content-list">
                            {relatedArticles.map((article) => (
                                    <li class="related-item">
                                      <a href={`/blog/${article.slug}/`} class="related-link">
                                        {article.cover && (
                                                <div class="related-thumbnail">
                                                  <img
                                                          src={`/assets/${article.cover.id}.webp`}
                                                          alt={article.title}
                                                          loading="lazy"
                                                  />
                                                </div>
                                        )}
                                        <div class="related-info">
                                          <h4>{article.title}</h4>
                                          {article.description && (
                                                  <p class="related-description">{article.description}</p>
                                          )}
                                          {article.publishDate && (
                                                  <span class="related-date">
                            <FormattedDate date={new Date(article.publishDate)}/>
                          </span>
                                          )}
                                        </div>
                                      </a>
                                    </li>
                            ))}
                          </ul>
                        </div>
                )}
              </div>
      )}
    </div>
  </article>

  <slot/>
</main>
<FindMeOn/>
<Footer/>
</body>
</html>

<style>
    main {
        width: 90%;
        max-width: 960px;
        margin: 3rem auto 0;
        padding: 2rem 1rem;
        min-height: calc(100vh - 12.5rem);
    }

    .hero-media {
        width: 100%;
        margin-bottom: 0;
    }

    .project-content {
        color: var(--color);
    }

    .title-section {
        margin-bottom: 2rem;
    }

    .title-section h1 {
        font-family: 'nudica_monobold', serif;
        margin: 0.5rem 0;
        font-size: 2.5rem;
        line-height: 1.2;
    }

    .dates {
        font-family: 'nudica_monolight', serif;
        background-color: var(--color);
        color: var(--bg-color);
        padding: 0.2rem 0.5rem;
        font-size: 0.9rem;
    }

    .date-range {
        font-style: normal;
    }

    .last-updated {
        font-style: italic;
        font-size: 0.85rem;
    }

    .link-section {
        font-family: 'nudica_monolight', serif;
        display: inline-block;
        margin: 1.5rem 0;
        padding: 1rem;
        background-color: var(--bg-code);
        border-radius: 8px;
    }

    .link-section a {
        color: var(--accent-color);
        text-decoration: none;
        word-break: break-all;
    }

    .link-section a:hover {
        text-decoration: underline;
    }

    /* Related Content Styles */
    .related-content-section {
        margin-top: 3rem;
        border-top: 1px solid var(--border-color);
        padding-top: 2rem;
    }

    .related-content-title {
        font-family: 'nudica_monobold', serif;
        font-size: 1.5rem;
        margin-bottom: 1rem;
    }

    .related-posts, .related-articles {
        margin-bottom: 2rem;
    }

    .related-posts h3, .related-articles h3 {
        font-family: 'nudica_monobold', serif;
        font-size: 1.2rem;
        margin-bottom: 1rem;
        color: var(--color);
        padding-bottom: 0.5rem;
        border-bottom: 1px solid var(--border-color);
    }

    /* Posts Grid Styles - Clean card grid */
    .posts-grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 1rem;
        margin: 0;
        padding: 0;
        width: 100%;
    }

    .post-card {
        background: rgba(var(--gray-light), 0.05);
        border-radius: 8px;
        overflow: hidden;
        transition: all 0.3s ease;
        max-width: 200px;
        width: 100%;
        aspect-ratio: 1;
    }

    .post-card:hover {
        transform: translateY(-5px);
        box-shadow: var(--box-shadow);
    }

    .post-card a {
        display: block;
        height: 100%;
        width: 100%;
        text-decoration: none;
    }

    .post-card-image {
        width: 100%;
        height: 100%;
        overflow: hidden;
    }

    .post-card-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .post-card:hover .post-card-image img {
        transform: scale(1.05);
    }

    /* Articles list styles (keeping the original) */
    .related-content-list {
        list-style: none;
        padding: 0;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .related-item {
        transition: transform 0.2s ease;
    }

    .related-item:hover {
        transform: translateY(-5px);
    }

    .related-link {
        text-decoration: none;
        color: var(--color);
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .related-thumbnail {
        aspect-ratio: 16/9;
        overflow: hidden;
        border-radius: 8px;
        margin-bottom: 0.5rem;
    }

    .related-thumbnail img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .related-link:hover .related-thumbnail img {
        transform: scale(1.05);
    }

    .related-info h4 {
        font-family: 'nudica_monobold', serif;
        margin: 0.5rem 0;
        font-size: 1rem;
    }

    .related-description {
        font-size: 0.9rem;
        opacity: 0.8;
        margin: 0.5rem 0;
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .related-date {
        font-family: 'nudica_monolight', serif;
        font-size: 0.8rem;
        background-color: var(--color);
        color: var(--bg-color);
        padding: 0.1rem 0.3rem;
        display: inline-block;
        margin-top: 0.5rem;
    }

    /* Media queries for responsive grid */
    @media (max-width: 1200px) {
        .posts-grid-container {
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
        }
    }

    @media (max-width: 600px) {
        .posts-grid-container {
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        }
    }

    @media (max-width: 768px) {
        .link-section {
            flex-direction: column;
            align-items: flex-start;
        }

        .title-section h1 {
            font-size: 2rem;
        }
    }

    article {
        display: flex;
        flex-direction: column;
    }

    @media (min-width: 1200px) {
        main {
            max-width: 90vw;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .hero-media {
            max-width: 700px;
        }

        .project-content {
            max-width: 700px;
        }

        article {
            justify-content: center;
            flex-direction: row;
            gap: 2rem;
        }
    }
</style>

<script>
  // Add click handler to make video controls appear when clicking on video
  document.addEventListener('DOMContentLoaded', () => {
    const videos = document.querySelectorAll('video');

    videos.forEach(video => {
      video.addEventListener('click', () => {
        video.controls = !video.controls;
      });
    });
  });
</script>