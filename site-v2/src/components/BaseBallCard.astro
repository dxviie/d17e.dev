---
import Markdown from "./Markdown.astro";
import ProjectsIcon from "./icons/ProjectsIcon.astro";
interface Props {
  name: string;
  description: string;
  imageUrl?: string;
  startDate?: Date | null;
  endDate?: Date | null;
}

const {
  name,
  description,
  imageUrl = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%23ddd'/%3E%3Ctext x='50' y='50' font-family='Arial' font-size='14' fill='%23666' text-anchor='middle' dy='.3em'%3ENo Image%3C/text%3E%3C/svg%3E",
  startDate = null,
  endDate = null
} = Astro.props;

// Check if the project is active (no end date)
const isActive = endDate === null;

// Format date display with appropriate detail level
function formatTimeDetails(start: Date | null, end: Date | null): string {
  if (!start) return '';

  // Convert dates to ensure we're working with Date objects
  const startDate = start instanceof Date ? start : new Date(start);

  if (!end) {
    // For active projects (should not reach here as we use isActive flag)
    return '';
  }

  const endDate = end instanceof Date ? end : new Date(end);

  // Get year and month for both dates
  const startMonth = startDate.getMonth();
  const startYear = startDate.getFullYear();
  const endMonth = endDate.getMonth();
  const endYear = endDate.getFullYear();

  // Month names for display
  const monthNames = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];

  // Same year and month
  if (startYear === endYear && startMonth === endMonth) {
    return `${monthNames[startMonth]} ${startYear}`;
  }

  // Same year, different months
  if (startYear === endYear) {
    return `${startYear}`;
  }

  // Different years
  return `${startYear}â€“${endYear}`;
}

// Get time display for non-active projects
const timeDisplay = !isActive && startDate ? formatTimeDetails(startDate, endDate) : '';

const names = name.split(" ");
---

<div class="card">
  <div class="image-container">
    <img src={imageUrl} alt={name}/>
    {isActive &&
            <div class="active-blip" title="Active project"></div>}
    {!isActive && timeDisplay &&
            <div class="time-badge" title="Project duration">{timeDisplay}</div>}
  </div>
  <div class="card-inner">
    <div class="card-front">
      <div class="player-info">
        <div class="name-container">
          {names.map((name, index) => (
                  <h2 class="name" key={index}>{name}</h2>
          ))}
        </div>
        <div class="description-container">
          <p class="description ">
            {description}
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
    .card {
        width: 80vw;
        max-width: 50svmin;
        min-width: 170px;
        aspect-ratio: 359/539;
        max-height: 50svmin;
        perspective: 1000px;
        font-family: 'Arial', sans-serif;
        filter: grayscale(100%) contrast(120%) brightness(95%) blur(0.5px);
        transition: filter 0.3s ease-in;
    }

    /* Desktop hover effects */
    @media (hover: hover) {
        .card:hover {
            filter: none;
        }

        .card:hover .description-container {
            opacity: 1;
        }
    }

    /* Touch device effects via JS intersection observer */
    .card.in-view {
        filter: none;
        transition: filter 0.4s ease-out;
    }

    .card.in-view .description-container {
        opacity: 1;
    }

    .card-inner {
        font-family: 'nudica_monobold', serif;
        pointer-events: none;
        position: relative;
        width: 100%;
        height: 100%;
        border-radius: 12px;
        overflow: hidden;
        display: flex;
        flex-direction: column;
    }

    .card-front {
        position: relative;
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: start;
        justify-content: end;
        pointer-events: none;
    }

    .badge {
        position: absolute;
        top: 10px;
        right: 10px;
        background: var(--bg-color);
        color: var(--color);
        padding: 4px 8px;
        border-radius: 50%;
        font-weight: bold;
        font-size: 1.2rem;
    }

    .active-blip {
        position: absolute;
        top: 15px;
        right: 15px;
        width: 15px;
        height: 15px;
        background: #22c55e; /* Green color for active projects */
        border-radius: 50%;
        box-shadow: 0 0 0 3px rgba(34, 197, 94, 0.3),
        0 0 10px rgba(34, 197, 94, 0.6);
        animation: pulse 2s infinite;
        z-index: 10;
    }

    .time-badge {
        position: absolute;
        top: 15px;
        right: 15px;
        background: var(--bg-color, #fafafa);
        color: var(--color, #222);
        font-family: 'nudica_monolight', serif;
        font-size: 0.7rem;
        padding: 4px 8px;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        z-index: 10;
        opacity: 0.9;
        transition: opacity 0.3s ease, transform 0.2s ease;
    }

    .card:hover .time-badge {
        opacity: 1;
        transform: translateY(-2px);
    }

    @keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(34, 197, 94, 0.6);
        }
        70% {
            box-shadow: 0 0 0 10px rgba(34, 197, 94, 0);
        }
        100% {
            box-shadow: 0 0 0 0 rgba(34, 197, 94, 0);
        }
    }

    .image-container {
        position: absolute;
        width: 100%;
        height: 100%;
        overflow: hidden;
        background: #f3f4f6;
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: filter 0.3s ease;
    }

    .image-container img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transform: scale(1.2);

    }

    .image-container:hover {
        filter: none;
    }

    .player-info {
        z-index: 1;
        padding: 15px;
        display: flex;
        flex-direction: column;
        height: 100%;
        justify-content: space-between;
    }

    .name {
        margin: 0;
        width: fit-content;
        font-size: 3.4rem;
        font-weight: bold;
        color: var(--bg-color);
        background-color: var(--color);
        padding: .3rem 1rem;
    }

    .description-container {
        margin-top: .21rem;
        font-size: .9rem;
        color: var(--color);
        background-color: var(--bg-color);
        padding: 1rem;
        opacity: 0;
        transition: opacity .8s ease;
        border-radius: 4px;
    }

    .description {
        font-family: 'nudica_monolight', serif;
        overflow: hidden;
        text-overflow: ellipsis;
        padding: 0;
        margin: 0;
    }

    .position, .team {
        font-family: 'nudica_monolight', serif;
        width: fit-content;
        padding: 0.3rem 1rem;
        margin: 5px 0;
        color: var(--color);
        background-color: var(--bg-color);
        font-size: 0.9em;
    }

    .stats {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        gap: 1rem;
        margin: 1rem;
        background: var(--color);
        color: var(--bg-color);
        width: fit-content;
    }

    .stat {
        display: flex;
        flex-direction: column;
        align-items: center;
        color: var(--bg-color);
        padding: 5px;
    }

    .stat-label {
        font-size: 0.8em;
        text-transform: uppercase;
    }

    .stat-value {
        font-size: 1.1em;
        font-weight: bold;
    }

    @media (max-width: 768px) {
        .card {
            width: 90vw;
            max-width: 90vw;
            max-height: none;
        }

        .name {
            font-size: 1.8rem;
        }

        .description-container {
            margin-bottom: .5rem;
        }

        .position, .team {
            font-size: 0.8em;
        }
    }
</style>