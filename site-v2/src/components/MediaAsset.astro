---
// MediaAsset.astro
import {Image} from "astro:assets";

interface MediaAssetProps {
  id: string;
  alt?: string;
  type?: string;
  filenameDownload?: string;
  width?: number;
  height?: number;
  isHero?: boolean;
  cmsUrl?: string;  // Base CMS URL for media assets
  objectFit?: string; // CSS property for object-fit
}

const {
  id,
  alt = "Media asset",
  type = "",
  filenameDownload,
  width = 800,
  height = 450,
  isHero = false,
  cmsUrl = "https://directus.d17e.dev/assets", // Default CMS URL - replace with your actual CMS URL
  objectFit = "cover" // Default object-fit value
} = Astro.props;

const isVideo = type?.startsWith("video/");
const showVideo = isVideo && isHero;

// Determine file extension and prepare image/video sources
let imageUrl;
let videoSrc;

if (isVideo) {
  // For videos, import the thumbnail image
  try {
    const thumbnailModule = await import(`../../public/assets/${id}.webp`);
    imageUrl = thumbnailModule.default;
  } catch (error) {
    console.error(`Error importing thumbnail for ${id} with extension webp`);
  }
  // Always set up the video source for hover/touch functionality
  videoSrc = `/assets/${id}.mp4`;
} else {
  // For images, we rely on our content syncer adding webps for each image
  let ext = "webp";
  try {
    const imageModule = await import(`../assets/${id}.${ext}`);
    imageUrl = imageModule.default;
  } catch (error) {
    console.error(`Error importing image for ${id}: with extension ${ext}`);
  }
}

// Format the CMS URL for the video
const cmsVideoUrl = `${cmsUrl}/${id}`;
---

<figure class="media-asset" data-is-video={isVideo.toString()} data-id={id} data-hero={isHero.toString()}>
  {showVideo ? (
          <div class="video-container">
            <video
                    class={`astro-media ${isHero ? 'hero-media' : ''}`}
                    poster={imageUrl?.src}
                    width={width}
                    height={height}
                    preload="metadata"
                    autoplay
                    loop
                    muted
                    playsinline
                    data-has-audio="checking"
            >
              <!-- Local source first for faster loading if available -->
              <source src={`/assets/${id}.mp4`} type={type}>
              <!-- CMS fallback source -->
              <source src={cmsVideoUrl} type={type}>
              Your browser does not support the video tag.
            </video>
            <button class="mute-toggle" aria-label="Toggle audio" title="Toggle mute" style="display: none;">
              <span class="icon-muted">ðŸ”‡</span>
              <span class="icon-unmuted">ðŸ”Š</span>
            </button>
          </div>
  ) : (
          <div class="media-wrapper">
            {imageUrl && (
              (isHero ? (<a href={`https://directus.d17e.dev/assets/${id}`} target="_blank" rel="noopener noreferrer" class="asset-link">
                        <Image
                                class={`astro-media ${isHero ? 'hero-media' : ''}`}
                                src={imageUrl}
                                width={width}
                                height={height}
                                alt={alt}
                                format="webp"
                                style={`object-fit: ${objectFit}; object-position: center;${isHero ? '' : ' transform: scale(1.1);'}`}
                        />
                        <div class="link-indicator" title="View original asset"></div>
                      </a>)
                : (
                              <Image
                                      class={`astro-media ${isHero ? 'hero-media' : ''}`}
                                      src={imageUrl}
                                      width={width}
                                      height={height}
                                      alt={alt}
                                      format="webp"
                                      style={`object-fit: ${objectFit}; object-position: center;${isHero ? '' : ' transform: scale(1.1);'}`}
                              />
                ))
            )}
            {isVideo && !isHero && (
                    <div class="video-hover-container">
                      <video
                              class="atro-media hover-video"
                              poster={imageUrl?.src}
                              width={width}
                              height={height}
                              preload="none"
                              loop
                              muted
                              playsinline
                      >
                        <source src={videoSrc} type={type}>
                        <source src={cmsVideoUrl} type={type}>
                      </video>
                      <div class="play-indicator"></div>
                    </div>
            )}
          </div>
  )}
</figure>

<style>
    .media-asset {
        margin: 0;
        width: 100%;
        height: 100%;
        position: relative;
    }

    .media-wrapper {
        position: relative;
        overflow: hidden;
        border-radius: 4px;
        width: 100%;
        height: 100%;
    }

    .astro-media {
        object-fit: cover;
    }

    .astro-media.hero-media {
        object-fit: contain;
    }

    img {
        width: 100%;
        height: 100%;
        display: block;
        border-radius: 4px;
    }

    .video-container {
        position: relative;
        width: 100%;
        border-radius: 4px;
        overflow: hidden;
    }

    .video-hover-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: 1;
    }

    .media-wrapper:hover .video-hover-container,
    .media-wrapper:focus .video-hover-container {
        opacity: 1;
    }

    .hover-video {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    video {
        width: 100%;
        height: auto;
        display: block;
        max-height: 80vh;
    }

    .play-indicator {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 60px;
        height: 60px;
        background-color: rgba(0, 0, 0, 0.5);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0.7;
        transition: opacity 0.3s ease;
        pointer-events: none;
    }

    .play-indicator::after {
        content: '';
        width: 0;
        height: 0;
        border-top: 12px solid transparent;
        border-bottom: 12px solid transparent;
        border-left: 20px solid white;
        margin-left: 4px;
    }

    .media-wrapper:hover .play-indicator {
        opacity: 0;
    }

    .asset-link {
        display: block;
        position: relative;
        width: 100%;
        height: 100%;
    }

    .link-indicator {
        position: absolute;
        top: 10px;
        right: 10px;
        width: 24px;
        height: 24px;
        background-color: rgba(0, 0, 0, 0.5);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease, transform 0.2s ease;
        z-index: 10;
        pointer-events: none;
    }

    .link-indicator::after {
        content: 'â†—';
        color: white;
        font-size: 14px;
        line-height: 1;
    }

    .asset-link:hover .link-indicator,
    .asset-link:focus .link-indicator {
        opacity: 0.8;
        transform: scale(1.1);
    }
    
    .mute-toggle {
        position: absolute;
        bottom: 10px;
        right: 10px;
        background-color: rgba(0, 0, 0, 0.5);
        border: none;
        border-radius: 50%;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: 10;
    }
    
    .video-container:hover .mute-toggle {
        opacity: 0.8;
    }
    
    @media (max-width: 768px) {
        .video-container .mute-toggle {
            opacity: 0.8;
        }
    }
    
    .mute-toggle:hover {
        opacity: 1;
        background-color: rgba(0, 0, 0, 0.7);
    }
    
    .icon-unmuted {
        display: none;
    }
    
    .video-container.unmuted .icon-muted {
        display: none;
    }
    
    .video-container.unmuted .icon-unmuted {
        display: block;
    }

    figcaption {
        font-size: 0.875rem;
        margin-top: 0.5rem;
        color: #666;
        text-align: center;
    }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    setupVideoHovers();
    playHeroVideos();
  });

  function setupVideoHovers() {
    const mediaAssets = document.querySelectorAll('.media-asset[data-is-video="true"]:not([data-hero="true"])');

    mediaAssets.forEach(asset => {
      // Skip if already initialized
      if (asset.hasAttribute('data-video-initialized')) return;

      const wrapper = asset.querySelector('.media-wrapper');
      const video = asset.querySelector<HTMLVideoElement>('.hover-video');
      const assetLink = asset.querySelector<HTMLAnchorElement>('.asset-link');

      if (!wrapper || !video) return;

      // Mark as initialized to prevent duplicate event handlers
      asset.setAttribute('data-video-initialized', 'true');

      // For desktop: hover events
      let playPromise: Promise<void> | undefined;

      wrapper.addEventListener('mouseenter', () => {
        // Only attempt to play if video is paused
        if (video.paused) {
          playPromise = video.play();
          playPromise?.catch(e => console.log('Autoplay prevented:', e));
        }
      });

      wrapper.addEventListener('mouseleave', () => {
        // Check if there's an ongoing play promise
        if (playPromise !== undefined) {
          playPromise.then(() => {
            // Only pause if video is still playing
            if (!video.paused) {
              video.pause();
              video.currentTime = 0;
            }
          }).catch(() => {
            // Promise rejected, do nothing as play likely failed
          });
        } else {
          // No active promise, safe to pause
          if (!video.paused) {
            video.pause();
            video.currentTime = 0;
          }
        }
      });

      // For mobile: touch events
      let touchTimeout: NodeJS.Timeout;
      let touchPlayPromise: Promise<void> | undefined;

      wrapper.addEventListener('touchstart', () => {
        touchTimeout = setTimeout(() => {
          // Only play if video is paused
          if (video.paused) {
            touchPlayPromise = video.play();
            touchPlayPromise?.catch(e => console.log('Autoplay prevented:', e));
          }
        }, 200); // Small delay to differentiate from click/tap
      });

      wrapper.addEventListener('touchend', () => {
        clearTimeout(touchTimeout);
        // Don't pause immediately on touchend to allow viewing on mobile
      });

      wrapper.addEventListener('touchmove', () => {
        clearTimeout(touchTimeout);
      });
    });
  }

  function playHeroVideos() {
    // Find and play all hero videos (these have autoplay attribute but need to be manually started after page transitions)
    const heroVideos = document.querySelectorAll('.video-container video[autoplay]');
    heroVideos.forEach(video => {
      if (video instanceof HTMLVideoElement && video.paused) {
        // Only attempt to play if the video is currently paused
        video.play().catch(e => console.log('Hero video autoplay prevented:', e));
      }
    });
  }

  // Also run on initial page load
  document.addEventListener('DOMContentLoaded', () => {
    setupVideoHovers();
    playHeroVideos();
    setupAssetLinks();
  });

  function setupAssetLinks() {
    // Handle clicks on videos to toggle controls rather than follow the link
    document.querySelectorAll('.video-container .asset-link').forEach(link => {
      const video = link.querySelector('video');
      if (!video) return;

      // Prevent video click from triggering the link navigation
      video.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();

        // Toggle video controls
        video.controls = !video.controls;
      });

      // Make sure link indicator click still navigates to the asset
      const indicator = link.querySelector('.link-indicator');
      if (indicator) {
        indicator.addEventListener('click', (e) => {
          e.stopPropagation(); // Don't let it bubble to video click handler
          window.open(link.href, '_blank', 'noopener,noreferrer');
        });
      }
    });
    
    // Setup mute toggle buttons for videos
    document.querySelectorAll('.video-container').forEach(container => {
      const video = container.querySelector('video');
      const muteButton = container.querySelector('.mute-toggle');
      
      if (!video || !muteButton) return;

      // Simpler approach: show mute button for all videos
      // Mobile: always visible
      // Desktop: visible on hover
      if (window.innerWidth <= 768) {
        muteButton.style.display = 'flex';
      } else {
        muteButton.style.display = 'flex';
      }
      
      // Setup toggle button click handler
      muteButton.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        // Toggle muted state
        video.muted = !video.muted;
        
        // Update container class for styling
        if (video.muted) {
          container.classList.remove('unmuted');
        } else {
          container.classList.add('unmuted');
          
          // Attempt to play if it was paused (mobile browsers often require user interaction)
          if (video.paused) {
            video.play().catch(err => console.log('Could not play video after unmuting:', err));
          }
        }
      });
    });
  }
</script>