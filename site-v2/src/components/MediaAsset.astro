---
// MediaAsset.astro
import {Image} from "astro:assets";

interface MediaAssetProps {
  id: string;
  alt?: string;
  type?: string;
  filenameDownload?: string;
  width?: number;
  height?: number;
  isHero?: boolean;
  cmsUrl?: string;  // Base CMS URL for media assets
}

const {
  id,
  alt = "Media asset",
  type = "",
  filenameDownload,
  width = 800,
  height = 450,
  isHero = false,
  cmsUrl = "https://directus.d17e.dev/assets" // Default CMS URL - replace with your actual CMS URL
} = Astro.props;

const isVideo = type?.startsWith("video/");
const showVideo = isVideo && isHero;

// Determine file extension and prepare image/video sources
let imageUrl;
let videoSrc;

if (isVideo) {
  // For videos, import the thumbnail image
  try {
    const thumbnailModule = await import(`../assets/${id}.jpg`);
    imageUrl = thumbnailModule.default;
  } catch (error) {
    console.error(`Error importing thumbnail for ${id}:`, error);
  }

  if (showVideo) {
    // For hero videos, set up the video source directly
    // No need to check existence since we're assuming it's there
    videoSrc = `/src/assets/${id}.mp4`;
  }
} else {
  // For images, determine extension from the type or filename
  let ext = "jpg"; // default extension

  if (type) {
    if (type === "image/png") ext = "png";
    else if (type === "image/gif") ext = "gif";
    else if (type === "image/webp") ext = "webp";
    else if (type === "image/svg+xml") ext = "svg";
    else if (type === "image/avif") ext = "avif";
    else if (type === "image/jpeg") ext = "jpeg";
  } else if (filenameDownload) {
    // Extract extension from filename if available
    const fileExt = filenameDownload.split(".").pop()?.toLowerCase();
    if (fileExt && ["jpg", "jpeg", "png", "gif", "webp", "svg", "avif"].includes(fileExt)) {
      ext = fileExt === "jpeg" ? "jpg" : fileExt;
    }
  }

  try {
    const imageModule = await import(`../assets/${id}.${ext}`);
    imageUrl = imageModule.default;
  } catch (error) {
    // Try jpg as fallback if specified extension fails
    try {
      const fallbackModule = await import(`../assets/${id}.jpg`);
      imageUrl = fallbackModule.default;
    } catch (fallbackError) {
      console.error(`Error importing image for ${id}:`, error);
    }
  }
}

// Format the CMS URL for the video
const cmsVideoUrl = `${cmsUrl}/${id}`;
---

<figure class="media-asset">
  {showVideo ? (
          <div class="video-container">
            <video
                    controls
                    poster={imageUrl?.src}
                    width={width}
                    height={height}
                    preload="none"
                    autoplay
                    muted
                    playsinline
            >
              <!-- Local source first for faster loading if available -->
              <source src={`https://d17e-dev.pages.dev/assets/${id}.mp4`} type={type}>

              <!-- CMS fallback source -->
              <source src={cmsVideoUrl} type={type}>

              Your browser does not support the video tag.
            </video>
          </div>
  ) : (
    imageUrl && (
            <Image
                    src={imageUrl}
                    width={width}
                    height={height}
                    alt={alt}
                    format="webp"
            />
    )
  )}
</figure>

<style>
    .media-asset {
        margin: 1.5rem 0;
        width: 100%;
    }

    img {
        max-width: 100%;
        height: auto;
        display: block;
        border-radius: 4px;
    }

    .video-container {
        position: relative;
        width: 100%;
        border-radius: 4px;
        overflow: hidden;
    }

    video {
        width: 100%;
        height: auto;
        display: block;
    }

    figcaption {
        font-size: 0.875rem;
        margin-top: 0.5rem;
        color: #666;
        text-align: center;
    }
</style>