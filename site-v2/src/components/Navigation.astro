---
import ColorModeToggle from './ColorModeToggle.astro';
import PostsIcon from './icons/PostsIcon.astro';
import BlogIcon from './icons/BlogIcon.astro';
import ProjectsIcon from "./icons/ProjectsIcon.astro";
import HomeIcon from "./icons/HomeIcon.astro";

const pathname = Astro.url.pathname;
const isHomePage = pathname === '/' || pathname === '';
const isPostsIndex = pathname.endsWith('posts/') || pathname.endsWith('posts');
const isBlogIndex = pathname.endsWith('blog/') || pathname.endsWith('blog');
const isProjectsIndex = pathname.endsWith('projects/') || pathname.endsWith('projects');
const isAboutPage = pathname.endsWith('about/') || pathname.endsWith('about');
// Using JavaScript to detect URL parameters since Astro.url.searchParams may not work consistently
let isComingFromLandingPage = false;
---

{!isHomePage &&
<nav id="main-nav">
  <!-- HOME BUTTON -->
  <a href="/" class="nav-item" id="home-nav-item" data-from-lp="false">
    <div class={`icon-box ${isHomePage ? 'active' : ''}`} id="home-icon-box">
      <!-- Will be updated by JavaScript -->
      <div class="push-button">
        <HomeIcon color={isHomePage ? "var(--bg-color)" : "var(--color)"}/>
      </div>
    </div>
    <span class="nav-text" data-active={isHomePage}>home</span>
  </a>

  <div class="spacer"></div>

  <!-- PROJECTS BUTTON -->
  <a href="/projects" class="nav-item">
    <div class={`icon-box ${isProjectsIndex ? 'active' : ''}`} id="projects-icon-box">
      <ProjectsIcon color={isProjectsIndex ? "var(--color)" : undefined}/>
    </div>
    <span class="nav-text" data-active={isProjectsIndex}>projects</span>
  </a>

  <!-- POSTS BUTTON -->
  <a href="/posts" class="nav-item">
    <div class={`icon-box ${isPostsIndex ? 'active' : ''}`} id="posts-icon-box">
      <PostsIcon color={isPostsIndex ? "var(--bg-color)" : undefined}/>
    </div>
    <span class="nav-text" data-active={isPostsIndex}>media</span>
  </a>

  <!-- BLOG BUTTON -->
  <a href="/blog" class="nav-item">
    <div class={`icon-box ${isBlogIndex ? 'active' : ''}`} id="blog-icon-box">
      <BlogIcon color={isBlogIndex ? "var(--bg-color)" : undefined}/>
    </div>
    <span class="nav-text" data-active={isBlogIndex}>blog</span>
  </a>

  <!-- ABOUT BUTTON -->
  <a href="/about" class="nav-item">
    <div>
      <div class={`about-icon ${isAboutPage ? 'active' : ''}`} id="about-icon">
        <span class="rotating-about">?</span></div>
    </div>
    <span class="nav-text" data-active={isAboutPage}>about</span>
  </a>

  <!-- COLOR MODE TOGGLE -->
  <ColorModeToggle/>
</nav>
  }
<style>
    nav {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 999;
        display: flex;
        width: calc(100% - 1rem);
        padding: 0 0.5rem;
        opacity: 1;
        background-color: var(--bg-color);
        align-items: center;
        transition: transform 0.3s ease;
    }

    .nav-item {
        display: flex;
        align-items: center;
        padding: 1rem .5rem;
        text-decoration: none;
        color: var(--color);
        transition: all 0.2s ease;
        border-radius: 4px;
    }

    .nav-item:hover {
        opacity: 0.8;
    }

    .icon-box {
        width: 28px;
        height: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-style: solid;
        border-width: 2px;
        border-radius: 50%;
        border-color: var(--bg-color);
        transition: all 0.2s ease;
        position: relative;
    }

    .icon-box.active {
        background-color: var(--button-bg-color);
        width: 28px;
        height: 28px;
        transform: translateY(-1px);
        border-color: var(--color);
    }

    .nav-text {
        font-family: 'nudica_monobold', serif;
        margin-left: 0.5rem;
    }

    .nav-text[data-active="true"] {
        color: var(--button-bg-color);
    }

    .spacer {
        flex: 1;
    }

    .push-button {
        transition: all 0.1s ease;
    }

    .push-button:active {
        transform: scale(0.95);
    }

    .about-icon {
        width: 28px;
        height: 28px;
        transition: all 0.2s ease;
        border-radius: 50%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        border-style: solid;
        border-width: 2px;
        font-family: 'nudica_monobold', serif;
        color: var(--bg-color);
        background-color: var(--color);
        font-size: medium;
    }

    .rotating-about {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
    }

    .rotating-about:hover {
        transform: rotate(180deg);
    }

    .about-icon.active {
        background-color: var(--bg-color);
        color: var(--color);
        width: 28px;
        height: 28px;
        transform: translateY(-1px);
        border-color: var(--color);
    }

    .back-to-landing-arrow {
        display: block;
        font-family: 'nudica_monobold', serif;
        font-weight: bold;
        color: var(--bg-color);
        background-color: var(--color);
        border-radius: 50%;
        width: 28px;
        height: 28px;
        font-size: 17px;
        text-align: center;
    }

    /* Hide text on mobile */
    @media (max-width: 600px) {
        nav {
            top: unset;
            bottom: 0;
            box-shadow: 0 7px 11px rgba(0, 0, 0, 0.8);
        }

        .nav-item {
            padding: .5rem .8rem;
        }

        .nav-text {
            display: none;
        }

        .icon-box.active {
            width: 30px;
            height: 30px;
        }
    }

    /* PWA mode specific styles */
    @media (max-width: 600px) and (display-mode: standalone) {
        nav {
            padding-bottom: 1.1rem;
        }
    }

    /* Class-based PWA mode (applied by JS) */
    @media (max-width: 600px) {
        nav.pwa-mode {
            padding-bottom: 1.1rem;
        }
    }

    /* Ensure HomeIcon SVG (added via JS) looks right */
    .push-button .home-svg {
        width: 24px;
        height: 24px;
        transition: transform 0.3s ease;
    }

    .push-button:hover .home-svg {
        transform: scale(1.1);
    }
</style>

<script is:inline>
  // Check if coming from landing page
  const checkFromLandingPage = () => {
    // Get the from-lp parameter from URL
    const urlParams = new URLSearchParams(window.location.search);
    const isFromLP = urlParams.has('from-lp');

    // Find all navigation elements that need to be updated
    const homeNavItem = document.getElementById('home-nav-item');
    const homeIconBox = document.getElementById('home-icon-box');

    if (homeNavItem && homeIconBox) {
      if (isFromLP) {
        // Coming from landing page - show back arrow
        homeNavItem.setAttribute('data-from-lp', 'true');
        homeNavItem.querySelector('.nav-text').textContent = 'back';

        // Replace with back arrow
        homeIconBox.innerHTML = `
          <div class="push-button">
            <div class="back-to-landing-arrow">
              ‚Üê
            </div>
          </div>
        `;
      } else {
        // Not coming from landing page - show home icon
        homeNavItem.removeAttribute('data-from-lp');
        homeNavItem.querySelector('.nav-text').textContent = 'home';

        // Reset to original HTML with HomeIcon
        const isActive = homeIconBox.classList.contains('active');
        const color = isActive ? "var(--bg-color)" : "var(--color)";

        // We can't directly create the Astro component, so we need to refresh the page
        // or use another approach if this backgto-home transition is critical
        const homeButtonHTML = `
          <div class="push-button">
            <svg class="home-svg" width="100%" height="100%" viewBox="0 0 24 24" 
                fill="none" stroke="${color}" stroke-width="2" 
                stroke-linecap="round" stroke-linejoin="round">
              <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
              <polyline points="9 22 9 12 15 12 15 22"></polyline>
            </svg>
          </div>
        `;

        homeIconBox.innerHTML = homeButtonHTML;
      }
    }
  };

  const setupNav = () => {
    const nav = document.getElementById('main-nav');
    if (!nav) return;

    // Detect if running as PWA (installed app)
    const isPWA = window.matchMedia('(display-mode: standalone)').matches ||
      window.navigator.standalone || // iOS Safari
      document.referrer.includes('android-app://');

    // Apply bottom padding if in PWA mode on mobile
    if (isPWA && window.innerWidth <= 600) {
      nav.classList.add('pwa-mode');
    } else {
      nav.classList.remove('pwa-mode');
    }

    // Check URL parameter on every page change
    checkFromLandingPage();
  };

  const setupNavScroll = () => {
    const nav = document.getElementById('main-nav');
    let lastScrollY = window.scrollY;
    const navHeight = nav?.offsetHeight || 0;

    // Threshold - how many pixels to scroll before hiding/showing the nav
    const scrollThreshold = 10;

    function handleScroll() {
      if (!nav) return;

      if (window.innerWidth <= 600) {
        return;
      }

      const currentScrollY = window.scrollY;
      const scrollDifference = currentScrollY - lastScrollY;

      // If we're at the very top, always show the nav
      if (currentScrollY <= 0) {
        nav.style.transform = 'translateY(0)';
      }
      // Scrolling down and past threshold, hide the nav
      else if (scrollDifference > scrollThreshold) {
        nav.style.transform = `translateY(-${navHeight}px)`;
      }
      // Scrolling up and past threshold, show the nav
      else if (scrollDifference < -scrollThreshold) {
        nav.style.transform = 'translateY(0)';
      }

      // Only update lastScrollY if we passed the threshold
      if (Math.abs(scrollDifference) > scrollThreshold) {
        lastScrollY = currentScrollY;
      }
    }

    // Throttle scroll events for performance
    let ticking = false;
    window.addEventListener('scroll', () => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          handleScroll();
          ticking = false;
        });
        ticking = true;
      }
    });
  };

  // Initialize on page load
  setupNav();
  setupNavScroll();

  // For Astro View Transitions, also handle setup after page changes
  document.addEventListener('astro:page-load', () => {
    setupNav();
    setupNavScroll();
  });

  // Handle URL changes
  window.addEventListener('popstate', setupNav);

  // Also check on resize in case of orientation changes
  window.addEventListener('resize', setupNav);
</script>