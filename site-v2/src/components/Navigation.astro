---
import ColorModeToggle from './ColorModeToggle.astro';
import PostsIcon from './icons/PostsIcon.astro';
import BlogIcon from './icons/BlogIcon.astro';
import ProjectsIcon from "./icons/ProjectsIcon.astro";

const pathname = Astro.url.pathname;
const isHomePage = pathname === '/' || pathname === '';
const isPostsIndex = pathname.endsWith('posts/') || pathname.endsWith('posts');
const isBlogIndex = pathname.endsWith('blog/') || pathname.endsWith('blog');
const isProjectsIndex = pathname.endsWith('projects/') || pathname.endsWith('projects');
const isAboutPage = pathname.endsWith('about/') || pathname.endsWith('about');
---

{!isHomePage &&
<nav id="main-nav">
  <!-- HOME BUTTON -->
  <a href="#" onclick="history.back(); return false;" class="nav-item" id="home-nav-item">
    <div class={`icon-box ${isHomePage ? 'active' : ''}`} id="home-icon-box">
      <div class="back-to-landing-arrow">
        ‚Üê
      </div>
    </div>
    <span class="nav-text" data-active={isHomePage}>back</span>
  </a>

  <div class="spacer"></div>

  <!-- PROJECTS BUTTON -->
  <a href="/projects" class="nav-item">
    <div class={`icon-box ${isProjectsIndex ? 'active' : ''}`} id="projects-icon-box">
      <ProjectsIcon color={isProjectsIndex ? "var(--color)" : undefined}/>
    </div>
    <span class="nav-text" data-active={isProjectsIndex}>projects</span>
  </a>

  <!-- POSTS BUTTON -->
  <a href="/posts" class="nav-item">
    <div class={`icon-box ${isPostsIndex ? 'active' : ''}`} id="posts-icon-box">
      <PostsIcon color={isPostsIndex ? "var(--bg-color)" : undefined}/>
    </div>
    <span class="nav-text" data-active={isPostsIndex}>media</span>
  </a>

  <!-- BLOG BUTTON -->
  <a href="/blog" class="nav-item">
    <div class={`icon-box ${isBlogIndex ? 'active' : ''}`} id="blog-icon-box">
      <BlogIcon color={isBlogIndex ? "var(--bg-color)" : undefined}/>
    </div>
    <span class="nav-text" data-active={isBlogIndex}>blog</span>
  </a>

  <!-- ABOUT BUTTON -->
  <a href="/about" class="nav-item">
    <div>
      <div class={`about-icon ${isAboutPage ? 'active' : ''}`} id="about-icon">
        <span class="rotating-about">?</span></div>
    </div>
    <span class="nav-text" data-active={isAboutPage}>about</span>
  </a>

  <!-- COLOR MODE TOGGLE -->
  <ColorModeToggle/>
</nav>
  }
<style>
    nav {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 999;
        display: flex;
        width: calc(100% - 1rem);
        padding: 0 0.5rem;
        opacity: 1;
        background-color: var(--bg-color);
        align-items: center;
        transition: transform 0.3s ease;
    }

    .nav-item {
        display: flex;
        align-items: center;
        padding: 1rem .5rem;
        text-decoration: none;
        color: var(--color);
        transition: all 0.2s ease;
        border-radius: 4px;
    }

    .nav-item:hover {
        opacity: 0.8;
    }

    .icon-box {
        width: 28px;
        height: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-style: solid;
        border-width: 2px;
        border-radius: 50%;
        border-color: var(--bg-color);
        transition: all 0.2s ease;
        position: relative;
    }

    .icon-box.active {
        background-color: var(--button-bg-color);
        width: 28px;
        height: 28px;
        transform: translateY(-1px);
        border-color: var(--color);
    }

    .nav-text {
        font-family: 'nudica_monobold', serif;
        margin-left: 0.5rem;
    }

    .nav-text[data-active="true"] {
        color: var(--button-bg-color);
    }

    .spacer {
        flex: 1;
    }

    .push-button {
        transition: all 0.1s ease;
    }

    .push-button:active {
        transform: scale(0.95);
    }

    .about-icon {
        width: 28px;
        height: 28px;
        transition: all 0.2s ease;
        border-radius: 50%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        border-style: solid;
        border-width: 2px;
        font-family: 'nudica_monobold', serif;
        color: var(--bg-color);
        background-color: var(--color);
        font-size: medium;
    }

    .rotating-about {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
    }

    .rotating-about:hover {
        transform: rotate(180deg);
    }

    .about-icon.active {
        background-color: var(--bg-color);
        color: var(--color);
        width: 28px;
        height: 28px;
        transform: translateY(-1px);
        border-color: var(--color);
    }

    .back-to-landing-arrow {
        display: block;
        font-family: 'nudica_monobold', serif;
        font-weight: bold;
        color: var(--bg-color);
        background-color: var(--color);
        border-radius: 50%;
        width: 28px;
        height: 28px;
        font-size: 17px;
        text-align: center;
    }

    /* Hide text on mobile */
    @media (max-width: 600px) {
        .nav-text {
            display: none;
        }

        .icon-box.active {
            width: 30px;
            height: 30px;
        }
    }
</style>

<script is:inline>
  const setupNavScroll = () => {
    const nav = document.getElementById('main-nav');
    let lastScrollY = window.scrollY;
    const navHeight = nav?.offsetHeight || 0;

    // Threshold - how many pixels to scroll before hiding/showing the nav
    const scrollThreshold = 10;

    function handleScroll() {
      if (!nav) return;

      const currentScrollY = window.scrollY;
      const scrollDifference = currentScrollY - lastScrollY;

      // If we're at the very top, always show the nav
      if (currentScrollY <= 0) {
        nav.style.transform = 'translateY(0)';
      }
      // Scrolling down and past threshold, hide the nav
      else if (scrollDifference > scrollThreshold) {
        nav.style.transform = `translateY(-${navHeight}px)`;
      }
      // Scrolling up and past threshold, show the nav
      else if (scrollDifference < -scrollThreshold) {
        nav.style.transform = 'translateY(0)';
      }

      // Only update lastScrollY if we passed the threshold
      if (Math.abs(scrollDifference) > scrollThreshold) {
        lastScrollY = currentScrollY;
      }
    }

    // Throttle scroll events for performance
    let ticking = false;
    window.addEventListener('scroll', () => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          handleScroll();
          ticking = false;
        });
        ticking = true;
      }
    });
  };

  // Initialize on page load
  setupNavScroll();

  // For Astro View Transitions, also handle setup after page changes
  document.addEventListener('astro:page-load', () => {
    setupNavScroll();
  });
</script>