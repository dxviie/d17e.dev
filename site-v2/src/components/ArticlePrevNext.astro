---
import {getCollection} from 'astro:content';
import FormattedDate from './FormattedDate.astro';

interface Props {
  currentSlug: string;
}

const {currentSlug} = Astro.props;

// Get all articles and sort them by publish date (newest first)
const allArticles = await getCollection('articles');
const sortedArticles = allArticles
  .filter(article => article.data.publishDate)
  .sort((a, b) => {
    return new Date(b.data.publishDate || 0).getTime() - new Date(a.data.publishDate || 0).getTime();
  });

// Find the index of the current article
const currentIndex = sortedArticles.findIndex(article => article.data.slug === currentSlug);
const prevArticle = currentIndex > 0 ? sortedArticles[currentIndex - 1] : null;
const nextArticle = currentIndex < sortedArticles.length - 1 ? sortedArticles[currentIndex + 1] : null;
---

{(prevArticle || nextArticle) && (
<nav class="article-navigation">
  <div class="nav-links">
    {prevArticle && (
            <a href={`/articles/${prevArticle.data.slug}`} class="nav-link prev-link" id="prev-article-link">
              <div class="arrow">←</div>
              <div class="nav-content">
                <span class="nav-label">Next</span>
                <span class="nav-title">{prevArticle.data.title}</span>
                {prevArticle.data.publishDate && <span class="nav-date"><FormattedDate date={prevArticle.data.publishDate}/></span>}
              </div>
            </a>
    )}

    {nextArticle && (
            <a href={`/articles/${nextArticle.data.slug}`} class="nav-link next-link" id="next-article-link">
              <div class="nav-content">
                <span class="nav-label">Prev</span>
                <span class="nav-title">{nextArticle.data.title}</span>
                {nextArticle.data.publishDate && <span class="nav-date"><FormattedDate date={nextArticle.data.publishDate}/></span>}
              </div>
              <div class="arrow">→</div>
            </a>
    )}
  </div>

  <div class="swipe-hint">
    <p>
      <span class="swipe-icon">↔️</span>
      Swipe to navigate
    </p>
  </div>
</nav>
  )}

<style>
    .article-navigation {
        margin-top: 4rem;
        padding-top: 2rem;
        border-top: 1px solid var(--border-color, #ddd);
    }

    .nav-links {
        font-family: 'nudica_monobold', serif;
        display: flex;
        justify-content: space-between;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .nav-link {
        display: flex;
        align-items: center;
        max-width: 48%;
        padding: 1rem;
        border-radius: 8px;
        text-decoration: none;
        color: var(--color);
        background-color: var(--bg-color);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .nav-link:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .prev-link {
        margin-right: auto;
    }

    .next-link {
        margin-left: auto;
        text-align: right;
    }

    .arrow {
        font-size: 1.5rem;
        margin: 0 0.5rem;
    }

    .nav-content {
        display: flex;
        flex-direction: column;
    }

    .nav-label {
        font-size: 0.8rem;
        text-transform: uppercase;
        opacity: 0.7;
    }

    .nav-title {
        font-weight: bold;
        margin: 0.25rem 0;
    }

    .nav-date {
        font-size: 0.8rem;
        opacity: 0.7;
    }

    .swipe-hint {
        display: none;
        margin-top: 1rem;
        text-align: center;
        color: var(--color);
        opacity: 0.7;
        font-size: 0.9rem;
    }

    .swipe-icon {
        font-size: 1.2rem;
        animation: swipe-animation 2s infinite alternate ease-in-out;
        display: inline-block;
    }

    @keyframes swipe-animation {
        0% {
            transform: translateX(-8px);
        }
        100% {
            transform: translateX(8px);
        }
    }

    @media (max-width: 768px) {
        .nav-links {
            flex-direction: column;
        }

        .nav-link {
            max-width: 100%;
        }

        .swipe-hint {
            display: block;
        }
    }
</style>

<script>
  import {initSwipeNavigation} from '../scripts/swipeNavigation.js';

  // Run after the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const prevLink = document.getElementById('prev-article-link');
    const nextLink = document.getElementById('next-article-link');

    // Initialize swipe navigation with the URLs if they exist
    initSwipeNavigation({
      prevUrl: prevLink ? prevLink.getAttribute('href') : null,
      nextUrl: nextLink ? nextLink.getAttribute('href') : null
    });
  });
</script>