---
// This component registers the service worker in the browser
---

<script>
  // Register service worker with proper error handling
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', async function() {
      try {
        // The path may be different depending on how @vite-pwa/astro configures it
        // It could be /sw.js or other paths
        const registration = await navigator.serviceWorker.register('/sw.js');
        console.log('ServiceWorker registration successful with scope: ', registration.scope);
        
        // Listen for any updates to the service worker
        registration.addEventListener('updatefound', () => {
          const newWorker = registration.installing;
          if (newWorker) {
            newWorker.addEventListener('statechange', () => {
              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                // New content is available, show update notification if desired
                console.log('New content is available; please refresh.');
              }
            });
          }
        });
      } catch (err) {
        console.error('ServiceWorker registration failed: ', err);
      }
    });
    
    // Handle service worker updates
    let refreshing = false;
    navigator.serviceWorker.addEventListener('controllerchange', () => {
      if (!refreshing) {
        refreshing = true;
        window.location.reload();
      }
    });
  }
</script>