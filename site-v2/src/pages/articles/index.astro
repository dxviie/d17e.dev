---
import {SITE_TITLE, SITE_DESCRIPTION} from '../../consts';
import {getCollection} from 'astro:content';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import BaseHead from "../../components/BaseHead.astro";

const articles = (await getCollection('articles')).sort(
  (a, b) => (b.data.publishDate?.valueOf() || 0) - (a.data.publishDate?.valueOf() || 0),
);

// Group articles by year
const articlesByYear = articles.reduce((acc, article) => {
  if (!article.data.publishDate) return acc;

  const year = article.data.publishDate.getFullYear();
  if (!acc[year]) {
    acc[year] = [];
  }

  acc[year].push(article);
  return acc;
}, {} as Record<number, typeof articles>);

// Sort years in descending order
const sortedYears = Object.keys(articlesByYear)
  .map(year => parseInt(year))
  .sort((a, b) => b - a);
---

<!doctype html>
<html lang="en">
<head>
  <title>{SITE_TITLE} | Articles</title>
  <BaseHead title={`${SITE_TITLE} | Articles`} description={SITE_DESCRIPTION}/>
  <style>
      main {
          margin: 3rem auto;
          width: 960px;
          max-width: calc(100% - 2rem);
          padding: 2rem 0;
      }

      .page-title {
          font-family: 'nudica_monobold', serif;
          margin-bottom: 2rem;
          border-bottom: 1px solid var(--border-color);
          padding-bottom: 0.5rem;
      }

      .year-section {
          margin-bottom: 3rem;
      }

      .year-heading {
          font-family: 'nudica_monobold', serif;
          font-size: 1.8rem;
          margin-bottom: 1rem;
          color: var(--color);
          border-bottom: 1px solid var(--border-color);
          padding-bottom: 0.5rem;
          position: sticky;
          top: 0;
          background-color: var(--bg-color);
          z-index: 10;
          transition: background-color 0.3s ease;
      }

      .article-list {
          list-style-type: none;
          padding: 0;
          margin: 0;
      }

      .article-item {
          padding: 1rem 0;
          border-bottom: 1px solid rgba(var(--gray-light), 0.2);
          transition: all 0.3s ease;
      }

      .article-item:last-child {
          border-bottom: none;
      }

      .article-item:hover {
          background-color: rgba(var(--gray-light), 0.05);
          transform: translateX(5px);
      }

      .article-link {
          display: grid;
          grid-template-columns: 120px 1fr;
          gap: 1.5rem;
          text-decoration: none;
          color: var(--color);
      }

      @media (max-width: 600px) {
          .article-link {
              grid-template-columns: 100px 1fr;
              gap: 1rem;
          }
      }

      .article-date {
          font-family: 'nudica_monolight', serif;
          font-size: 0.9rem;
          background-color: var(--color);
          color: var(--bg-color);
          padding: 0.2rem 0.5rem;
      }

      .article-title {
          font-family: 'nudica_monobold', serif;
          margin: 0 0 0.5rem 0;
          font-size: 1.5rem;
          line-height: 1.3;
          color: var(--color);
      }

      .article-description {
          margin: 0;
          color: var(--color);
          opacity: 0.8;
          font-size: 1rem;
          overflow: hidden;
          text-overflow: ellipsis;
          display: -webkit-box;
          -webkit-line-clamp: 2;
          -webkit-box-orient: vertical;
      }
  </style>
</head>
<body>
<Header/>
<main>
  <h1 class="page-title">Articles</h1>

  {sortedYears.map(year => (
          <section class="year-section">
            <h2 class="year-heading">{year}</h2>
            <ul class="article-list">
              {articlesByYear[year].map(article => (
                      <li class="article-item">
                        <a href={`/articles/${article.data.slug}/`} class="article-link">
                          <div>
                            <span class="article-date">
                            {article.data.publishDate && (
                                    <FormattedDate date={article.data.publishDate} format="MMM DD"/>
                            )}
                          </span>
                          </div>
                          <div>
                            <h3 class="article-title">{article.data.title}</h3>
                            {article.data.description && (
                                    <p class="article-description">{article.data.description}</p>
                            )}
                          </div>
                        </a>
                      </li>
              ))}
            </ul>
          </section>
  ))}
</main>
<Footer/>
</body>
</html>