---
import {getCollection} from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import FindMeOn from "../../components/FindMeOn.astro";
import {SITE_TITLE, SITE_DESCRIPTION} from '../../consts';
import {countTagOccurrences, getTagFontSize} from '../../utils/tagUtils';

// Get all content with potential tags
const projects = await getCollection('projects');
const articles = await getCollection('articles');
const posts = await getCollection('posts');

// Combine all content for tag extraction
const allContent = [
  ...projects.map(project => ({body: project.data.body || ''})),
  ...articles.map(article => ({body: article.data.body || ''})),
  ...posts.map(post => ({body: post.data.body || ''}))
];

// Get tag counts
const tagCounts = countTagOccurrences(allContent);

// Convert to array for sorting
const sortedTags = Array.from(tagCounts.entries()).sort((a, b) => {
  // First sort by count (descending)
  if (b[1] !== a[1]) return b[1] - a[1];
  // Then alphabetically if counts are equal
  return a[0].localeCompare(b[0]);
}).filter(t => t[1] > 1);

// Calculate min and max counts for font sizing
const counts = Array.from(tagCounts.values());
const maxCount = Math.max(...counts);
const minCount = Math.min(...counts);
---

<html lang="en">
<head>
  <BaseHead title={`Tags | ${SITE_TITLE}`} description={SITE_DESCRIPTION}/>
</head>
<body>
<div class="statusbar"/>
<Header/>
<main class="content-margin">
  <div class="header-container">
    <h1 class="page-title">Tags</h1>
  </div>

  <section class="tag-cloud">
    {sortedTags.length === 0 ? (
            <p class="no-tags">No tags found</p>
    ) : (
            <div class="tag-container">
              {sortedTags.map(([tag, count]) => (
                      <a
                              href={`/tags/${tag.toLowerCase()}`}
                              class="tag-link"
                              style={`font-size: ${getTagFontSize(count, maxCount, minCount)}rem;`}
                      >
                        {tag} <span class="tag-count">({count})</span>
                      </a>
              ))}
            </div>
    )}
  </section>
</main>
<FindMeOn/>
<Footer/>
</body>
</html>

<style>
    main {
        width: 90%;
        max-width: 960px;
        padding: 2rem 1rem;
        /* margin now handled by content-margin class */
    }

    .header-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        margin-bottom: 2rem;
        border-bottom: 1px solid var(--border-color);
        padding-bottom: 0.5rem;
    }

    .page-title {
        font-family: 'nudica_monobold', serif;
        margin: 0;
    }

    .tag-cloud {
        padding: 2rem 0;
    }

    .tag-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        justify-content: center;
        padding: 1rem;
    }

    .tag-link {
        font-family: 'nudica_monobold', serif;
        color: var(--accent-color);
        background-color: rgba(var(--accent-rgb), 0.1);
        padding: 0.5rem 1rem;
        border-radius: 8px;
        text-decoration: none;
        transition: all 0.2s ease;
        display: inline-block;
        line-height: 1.2;
        align-content: center;
    }

    .tag-link:hover {
        background-color: rgba(var(--accent-rgb), 0.2);
        transform: translateY(-2px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .tag-count {
        opacity: 0.7;
        font-size: 0.8em;
    }

    .no-tags {
        text-align: center;
        color: var(--color);
        opacity: 0.7;
        font-size: 1.2rem;
        padding: 2rem;
    }

    @media (max-width: 768px) {
        .tag-container {
            padding: 0.5rem;
            gap: 0.5rem;
        }

        .tag-link {
            padding: 0.3rem 0.7rem;
        }
    }
</style>