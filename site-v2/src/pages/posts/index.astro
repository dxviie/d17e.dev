---
import {SITE_TITLE, SITE_DESCRIPTION} from '../../consts';
import {getCollection} from 'astro:content';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import BaseHead from "../../components/BaseHead.astro";
import MediaAsset from "../../components/MediaAsset.astro";

const posts = (await getCollection('posts')).sort(
  (a, b) => (b.data.publishDate?.valueOf() || 0) - (a.data.publishDate?.valueOf() || 0),
);
---

<!doctype html>
<html lang="en">
<head>
  <title>{SITE_TITLE} | d17e.dev - Posts</title>
  <BaseHead title={`${SITE_TITLE} | Posts`} description={SITE_DESCRIPTION}/>
  <style>
      main {
          display: flex;
          flex-direction: column;
          margin: 3rem auto 0;
          width: 1960px;
          max-width: calc(100% - 2rem);
          padding: 2rem 0;
      }

      .header-container {
          display: flex;
          justify-content: space-between;
          align-items: center;
          width: 100%;
          max-width: 960px;
          align-self: center;
          margin-bottom: 2rem;
          border-bottom: 1px solid var(--border-color);
          padding-bottom: 0.5rem;
      }

      .page-title {
          font-family: 'nudica_monobold', serif;
          margin: 0;
      }

      .zoom-controls {
          display: none; /* Hidden by default, shown on mobile */
          gap: 8px;
          align-items: center;
      }

      .zoom-controls {
          display: none; /* Hidden by default, shown on mobile */
          gap: 6px;
          align-items: center;
      }

      .zoom-button {
          font-family: 'nudica_monolight', serif;
          width: 32px;
          height: 32px;
          border-radius: 6px;
          background-color: var(--bg-color);
          color: var(--color);
          font-size: 16px;
          border: none;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          transition: all 0.2s ease;
          transform: translateY(0);
          padding: 0;
      }

      .zoom-button:hover {
          transform: translateY(-2px);
      }

      .zoom-button:active {
          transform: translateY(1px);
      }

      .zoom-button.active {
          background-color: var(--color);
          color: white;
      }

      ul {
          justify-content: center;
          display: flex;
          flex-wrap: wrap;
          gap: 2rem;
          list-style-type: none;
          margin: 0;
          padding: 0;
      }

      ul li {
          width: calc(33% - 1rem);
          background: rgba(var(--gray-light), 0.05);
          border-radius: 4px;
          overflow: hidden;
          transition: all 0.3s ease;
      }

      ul li:hover {
          transform: translateY(-5px);
          box-shadow: var(--box-shadow);
      }

      .media-container {
          position: relative;
          width: 100%;
          aspect-ratio: 1;
          overflow: hidden;
          transition: all 0.3s ease;
      }

      .title-overlay {
          position: absolute;
          bottom: 0;
          left: 0;
          right: 0;
          padding: 1rem;
          background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
          color: white;
          z-index: 1;
      }

      .title-overlay h2 {
          margin: 0;
          font-family: 'nudica_monobold', serif;
          color: white;
          padding: 0.2rem 0.5rem;
          font-size: 1.5rem;
          text-shadow: 0 1px 3px rgba(0, 0, 0, 0.5);
      }

      ul li:first-child .title-overlay h2 {
          font-size: 2rem;
      }

      .title-overlay .date {
          background-color: var(--color);
          color: var(--bg-color);
          padding: 0.2rem 0.5rem;
          font-family: 'nudica_monolight', serif;
          margin: 0.5rem 0 0;
          font-size: 0.9rem;
      }

      ul li a {
          display: block;
          text-decoration: none;
          color: var(--color);
          position: relative;
      }

      .content {
          padding: 1rem;
          display: none; /* Hide the original content area since we're using overlay */
      }

      @media (max-width: 1650px) {
          ul li {
              width: calc(50% - 1rem);
          }

          ul {
              gap: 1rem;
          }

          .title-overlay h2 {
              font-size: 1.2rem;
          }
      }

      @media (max-width: 768px) {
          ul {
              gap: .5rem;
          }

          ul li {
              width: 100%; /* Default for mobile (1 card per row) */
              transition: width 0.3s ease;
          }

          ul.zoom-level-2 li {
              width: calc(50% - 0.5rem); /* 2 cards per row */
          }

          ul.zoom-level-3 li {
              width: calc(33.333% - 0.667rem); /* 3 cards per row */
          }

          /* Hide text and gradient overlay in multi-card view */
          .multi-card-view .title-overlay {
              display: none !important;
          }

          /* Adjust the media container for multi-card view */
          .multi-card-view .media-container {
              aspect-ratio: 1; /* Wider aspect ratio for smaller cards */
          }

          /* Adjust the image scaling for better grid view */
          .multi-card-view .media-asset img,
          .multi-card-view figure img {
              transform: scale(1) !important;
              object-fit: cover;
          }

          .title-overlay h2 {
              font-size: 1.2rem;
          }

          .zoom-controls {
              display: flex; /* Show zoom controls on mobile */
          }
      }
  </style>
</head>
<body>
<Header/>
<main>
  <div class="header-container">
    <h1 class="page-title">Posts</h1>
    <div class="zoom-controls" id="zoom-controls">
      <button class="zoom-button zoom-1" title="1 card per row">1</button>
      <button class="zoom-button zoom-2" title="2 cards per row">2</button>
      <button class="zoom-button zoom-3" title="3 cards per row">3</button>
    </div>
  </div>
  <section>
    <ul id="posts-grid">
      {
        posts.map((post) => (
                <li>
                  <a href={`/posts/${post.data.slug}/`}>
                    {post.data.cover && (
                            <div class="media-container">
                              <MediaAsset
                                      id={post.data.cover.id}
                                      title={post.data.cover.title}
                                      alt={post.data.cover.title || post.data.title}
                                      type={post.data.cover.type}
                                      filenameDownload={post.data.cover.filenameDownload}
                                      width={800}
                                      height={450}
                              />

                              <div class="title-overlay">
                                {post.data.publishDate && (
                                        <span class="date">
                        <FormattedDate date={post.data.publishDate}/>
                      </span>
                                )}
                                <h2>{post.data.title}</h2>
                              </div>
                            </div>
                    )}
                    <div class="content">
                      {post.data.publishDate && (
                              <span class="date">
                    <FormattedDate date={post.data.publishDate}/>
                  </span>
                      )}
                      <h2 class="title">{post.data.title}</h2>
                    </div>
                  </a>
                </li>
        ))
      }
    </ul>
  </section>
</main>
<Footer/>

<script>
  // Initialize zoom controls and video hover functionality
  document.addEventListener('DOMContentLoaded', () => {
    initVideoHover();
    initZoomControls();
  });

  // Handle Astro view transitions
  document.addEventListener('astro:page-load', () => {
    initVideoHover();
    initZoomControls();
  });

  function initVideoHover() {
    const videos = document.querySelectorAll('video');

    videos.forEach(video => {
      const listItem = video.closest('li');

      if (listItem) {
        listItem.addEventListener('mouseenter', () => {
          video.play();
        });

        listItem.addEventListener('mouseleave', () => {
          video.pause();
          // Reset to first frame
          video.currentTime = 0.1;
        });
      }
    });
  }

  function initZoomControls() {
    const postsGrid = document.getElementById('posts-grid');
    const zoomButtons = document.querySelectorAll('.zoom-button');

    if (!postsGrid || !zoomButtons.length) return;

    // Load zoom level from localStorage or use default (1)
    let currentZoom = parseInt(localStorage.getItem('posts-zoom-level') || '1');

    // Apply the initial zoom level
    updateZoomLevel(currentZoom);

    // Add click handlers to all zoom buttons
    zoomButtons.forEach(button => {
      const level = parseInt(button.textContent || '1');

      button.addEventListener('click', () => {
        if (currentZoom !== level) {
          currentZoom = level;
          updateZoomLevel(currentZoom);
        }
      });
    });

    function updateZoomLevel(level) {
      // Ensure level is valid (1-3)
      level = Math.max(1, Math.min(3, level));

      // Remove all zoom classes
      postsGrid.classList.remove('zoom-level-1', 'zoom-level-2', 'zoom-level-3');

      // Add current zoom class (only add class for levels 2 and 3, level 1 is default)
      if (level > 1) {
        postsGrid.classList.add(`zoom-level-${level}`);

        // Hide text/gradient overlay when in multi-card mode
        document.documentElement.classList.add('multi-card-view');
      } else {
        document.documentElement.classList.remove('multi-card-view');
      }

      // Save to localStorage
      localStorage.setItem('posts-zoom-level', level.toString());

      // Update active state for all buttons
      zoomButtons.forEach(button => {
        const buttonLevel = parseInt(button.textContent || '1');
        button.classList.toggle('active', buttonLevel === level);
      });

      // Add feedback message for screen readers
      const message = `Showing ${level === 1 ? 'one' : level === 2 ? 'two' : 'three'} card${level > 1 ? 's' : ''} per row`;

      // Create or update feedback element
      let feedback = document.getElementById('zoom-feedback');
      if (!feedback) {
        feedback = document.createElement('div');
        feedback.id = 'zoom-feedback';
        feedback.className = 'sr-only';
        document.body.appendChild(feedback);
      }
      feedback.textContent = message;
    }
  }
</script>
</body>
</html>