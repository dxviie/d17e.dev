---
import {SITE_TITLE, SITE_DESCRIPTION} from '../../consts';
import {getCollection} from 'astro:content';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import BaseHead from "../../components/BaseHead.astro";

const posts = (await getCollection('posts')).sort(
  (a, b) => (b.data.publishDate?.valueOf() || 0) - (a.data.publishDate?.valueOf() || 0),
);
---

<!doctype html>
<html lang="en">
<head>
  <title>{SITE_TITLE} | Posts</title>
  <BaseHead title={`${SITE_TITLE} | Posts`} description={SITE_DESCRIPTION}/>
  <style>
      main {
          margin: 3rem auto 0;
          width: 1960px;
          max-width: calc(100% - 2rem);

          padding: 2rem 0;
      }

      ul {
          justify-content: center;
          display: flex;
          flex-wrap: wrap;
          gap: 2rem;
          list-style-type: none;
          margin: 0;
          padding: 0;
      }

      ul li {
          width: calc(33% - 1rem);
          background: rgba(var(--gray-light), 0.05);
          border-radius: 12px;
          overflow: hidden;
          transition: all 0.3s ease;
      }

      ul li:hover {
          transform: translateY(-5px);
          box-shadow: var(--box-shadow);
      }

      .media-container {
          position: relative;
          width: 100%;
          aspect-ratio: 1;
          overflow: hidden;
      }

      ul li img, ul li video {
          width: 100%;
          height: 100%;
          object-fit: cover;
      }

      .title-overlay {
          position: absolute;
          bottom: 0;
          left: 0;
          right: 0;
          padding: 1rem;
          background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
          color: white;
          z-index: 1;
      }

      .title-overlay h2 {
          margin: 0;
          font-family: 'nudica_monobold', serif;
          color: white;
          padding: 0.2rem 0.5rem;
          font-size: 1.5rem;
          text-shadow: 0 1px 3px rgba(0, 0, 0, 0.5);
      }

      ul li:first-child .title-overlay h2 {
          font-size: 2rem;
      }

      .title-overlay .date {
          background-color: var(--color);
          color: var(--bg-color);
          padding: 0.2rem 0.5rem;
          font-family: 'nudica_monolight', serif;
          margin: 0.5rem 0 0;
          font-size: 0.9rem;
      }

      .video-indicator {
          position: absolute;
          top: 10px;
          right: 10px;
          background: transparent;
          color: white;
          padding: 4px 8px;
          border-radius: 4px;
          font-size: 1rem;
          z-index: 1;
      }

      ul li a {
          display: block;
          text-decoration: none;
          color: var(--color);
          position: relative;
      }

      .content {
          padding: 1rem;
          display: none; /* Hide the original content area since we're using overlay */
      }

      @media (max-width: 768px) {
          ul {
              gap: 1rem;
          }

          ul li {
              width: 100%;
          }

          .title-overlay h2 {
              font-size: 1.2rem;
          }
      }
  </style>
</head>
<body>
<Header/>
<main>
  <section>
    <ul>
      {
        posts.map((post) => {
          // Determine if the cover is a video 

          const isVideo = post.data.cover?.type?.startsWith('video/') ||
            post.data.cover?.filenameDownload?.endsWith('.mp4') ||
            post.data.cover?.filenameDownload?.endsWith('.mov');

          // Get the appropriate media type

          const mediaType = post.data.cover?.type ||
            (post.data.cover?.filenameDownload?.endsWith('.mp4') ? 'video/mp4' :
              post.data.cover?.filenameDownload?.endsWith('.mov') ? 'video/quicktime' : '');

          return (
                  <li>
                    <a href={`/posts/${post.data.slug}/`}>
                      {post.data.cover && (
                              <div class="media-container">
                                {isVideo ? (
                                        <>
                                          <video
                                                  muted
                                                  loop
                                                  playsinline
                                                  preload="metadata"
                                                  poster={`${import.meta.env.DIRECTUS_URL}/assets/${post.data.cover.id}?fit=cover&width=800&height=450&format=webp&t=1`}
                                          >
                                            <source
                                                    src={`${import.meta.env.DIRECTUS_URL}/assets/${post.data.cover.id}#t=0.1`}
                                                    type={mediaType}
                                            />
                                          </video>
                                          <div class="video-indicator">ðŸŽ¬</div>
                                        </>
                                ) : (
                                        <img
                                                src={`${import.meta.env.DIRECTUS_URL}/assets/${post.data.cover.id}?width=800&height=450&fit=cover&format=webp`}
                                                alt={post.data.cover.title || post.data.title}
                                        />
                                )}

                                <div class="title-overlay">
                                  {post.data.publishDate && (
                                          <span class="date">
                                            <FormattedDate date={post.data.publishDate}/>
                                          </span>
                                  )}
                                  <h2>{post.data.title}</h2>
                                </div>
                              </div>
                      )}
                      <div class="content">
                        {post.data.publishDate && (
                                <span class="date">
                                  <FormattedDate date={post.data.publishDate}/>
                                </span>
                        )}
                        <h2 class="title">{post.data.title}</h2>
                      </div>
                    </a>
                  </li>
          )
        })
      }
    </ul>
  </section>
</main>
<Footer/>

<script>
  // Add event listeners to start videos on hover
  document.addEventListener('DOMContentLoaded', () => {
    const videos = document.querySelectorAll('video');

    videos.forEach(video => {
      const listItem = video.closest('li');

      if (listItem) {
        listItem.addEventListener('mouseenter', () => {
          video.play();
        });

        listItem.addEventListener('mouseleave', () => {
          video.pause();
          // Reset to first frame
          video.currentTime = 0.1;
        });
      }
    });
  });
</script>
</body>
</html>