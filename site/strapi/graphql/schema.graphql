### This file was generated by Nexus Schema
### Do not make changes to this file directly


type ArtPage {
  author: AuthorEntityResponse
  createdAt: DateTime
  description: String!
  publishedAt: DateTime
  title: String!
  updatedAt: DateTime
}

type ArtPageEntity {
  attributes: ArtPage
  id: ID
}

type ArtPageEntityResponse {
  data: ArtPageEntity
}

type ArtPageEntityResponseCollection {
  data: [ArtPageEntity!]!
  meta: ResponseCollectionMeta!
}

input ArtPageFiltersInput {
  and: [ArtPageFiltersInput]
  author: AuthorFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  not: ArtPageFiltersInput
  or: [ArtPageFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ArtPageInput {
  author: ID
  description: String
  publishedAt: DateTime
  title: String
}

type ArtPageRelationResponseCollection {
  data: [ArtPageEntity!]!
}

type Article {
  author: AuthorEntityResponse
  body: String!
  cover: UploadFileEntityResponse
  createdAt: DateTime
  description: String!
  gallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  publishDtm: DateTime
  publishedAt: DateTime
  slug: String!
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
  title: String!
  updatedAt: DateTime
}

type ArticleEntity {
  attributes: Article
  id: ID
}

type ArticleEntityResponse {
  data: ArticleEntity
}

type ArticleEntityResponseCollection {
  data: [ArticleEntity!]!
  meta: ResponseCollectionMeta!
}

input ArticleFiltersInput {
  and: [ArticleFiltersInput]
  author: AuthorFiltersInput
  body: StringFilterInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  not: ArticleFiltersInput
  or: [ArticleFiltersInput]
  publishDtm: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  tags: TagFiltersInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ArticleInput {
  author: ID
  body: String
  cover: ID
  description: String
  gallery: [ID]
  publishDtm: DateTime
  publishedAt: DateTime
  slug: String
  tags: [ID]
  title: String
}

type ArticleRelationResponseCollection {
  data: [ArticleEntity!]!
}

type Author {
  avatar: UploadFileEntityResponse!
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

type AuthorEntity {
  attributes: Author
  id: ID
}

type AuthorEntityResponse {
  data: AuthorEntity
}

type AuthorEntityResponseCollection {
  data: [AuthorEntity!]!
  meta: ResponseCollectionMeta!
}

input AuthorFiltersInput {
  and: [AuthorFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: AuthorFiltersInput
  or: [AuthorFiltersInput]
  updatedAt: DateTimeFilterInput
}

input AuthorInput {
  avatar: ID
  name: String
}

type AuthorRelationResponseCollection {
  data: [AuthorEntity!]!
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type ComponentSharedMetaSocial {
  description: String!
  id: ID!
  image: UploadFileEntityResponse
  socialNetwork: ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK!
  title: String!
}

input ComponentSharedMetaSocialFiltersInput {
  and: [ComponentSharedMetaSocialFiltersInput]
  description: StringFilterInput
  not: ComponentSharedMetaSocialFiltersInput
  or: [ComponentSharedMetaSocialFiltersInput]
  socialNetwork: StringFilterInput
  title: StringFilterInput
}

input ComponentSharedMetaSocialInput {
  description: String
  id: ID
  image: ID
  socialNetwork: ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK
  title: String
}

type ComponentSharedSeo {
  canonicalURL: String
  id: ID!
  keywords: String
  metaDescription: String!
  metaImage: UploadFileEntityResponse!
  metaRobots: String
  metaSocial(filters: ComponentSharedMetaSocialFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSharedMetaSocial]
  metaTitle: String!
  metaViewport: String
  structuredData: JSON
}

input ComponentSharedSeoFiltersInput {
  and: [ComponentSharedSeoFiltersInput]
  canonicalURL: StringFilterInput
  keywords: StringFilterInput
  metaDescription: StringFilterInput
  metaRobots: StringFilterInput
  metaSocial: ComponentSharedMetaSocialFiltersInput
  metaTitle: StringFilterInput
  metaViewport: StringFilterInput
  not: ComponentSharedSeoFiltersInput
  or: [ComponentSharedSeoFiltersInput]
  structuredData: JSONFilterInput
}

input ComponentSharedSeoInput {
  canonicalURL: String
  id: ID
  keywords: String
  metaDescription: String
  metaImage: ID
  metaRobots: String
  metaSocial: [ComponentSharedMetaSocialInput]
  metaTitle: String
  metaViewport: String
  structuredData: JSON
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK {
  Facebook
  Twitter
}

type Error {
  code: String!
  message: String
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

type FindMeOnLinkList {
  createdAt: DateTime
  links(filters: LinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): LinkRelationResponseCollection
  updatedAt: DateTime
}

type FindMeOnLinkListEntity {
  attributes: FindMeOnLinkList
  id: ID
}

type FindMeOnLinkListEntityResponse {
  data: FindMeOnLinkListEntity
}

type FindMeOnLinkListEntityResponseCollection {
  data: [FindMeOnLinkListEntity!]!
  meta: ResponseCollectionMeta!
}

input FindMeOnLinkListFiltersInput {
  and: [FindMeOnLinkListFiltersInput]
  createdAt: DateTimeFilterInput
  links: LinkFiltersInput
  not: FindMeOnLinkListFiltersInput
  or: [FindMeOnLinkListFiltersInput]
  updatedAt: DateTimeFilterInput
}

input FindMeOnLinkListInput {
  links: [ID]
}

type FindMeOnLinkListRelationResponseCollection {
  data: [FindMeOnLinkListEntity!]!
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = ArtPage | Article | Author | ComponentSharedMetaSocial | ComponentSharedSeo | FindMeOnLinkList | I18NLocale | IdeasPage | LandingPage | Link | Post | Quote | Tag | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

type IdeasPage {
  author: AuthorEntityResponse
  createdAt: DateTime
  description: String!
  publishedAt: DateTime
  title: String!
  updatedAt: DateTime
}

type IdeasPageEntity {
  attributes: IdeasPage
  id: ID
}

type IdeasPageEntityResponse {
  data: IdeasPageEntity
}

type IdeasPageEntityResponseCollection {
  data: [IdeasPageEntity!]!
  meta: ResponseCollectionMeta!
}

input IdeasPageFiltersInput {
  and: [IdeasPageFiltersInput]
  author: AuthorFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  not: IdeasPageFiltersInput
  or: [IdeasPageFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input IdeasPageInput {
  author: ID
  description: String
  publishedAt: DateTime
  title: String
}

type IdeasPageRelationResponseCollection {
  data: [IdeasPageEntity!]!
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

type LandingPage {
  artDescription: String
  author: AuthorEntityResponse
  codeDescription: String
  contactDescription: String
  createdAt: DateTime
  featuredArtPosts(filters: PostFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PostRelationResponseCollection
  featuredIdeaArticles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleRelationResponseCollection
  ideasDescription: String
  publishedAt: DateTime
  updatedAt: DateTime
}

type LandingPageEntity {
  attributes: LandingPage
  id: ID
}

type LandingPageEntityResponse {
  data: LandingPageEntity
}

type LandingPageEntityResponseCollection {
  data: [LandingPageEntity!]!
  meta: ResponseCollectionMeta!
}

input LandingPageFiltersInput {
  and: [LandingPageFiltersInput]
  artDescription: StringFilterInput
  author: AuthorFiltersInput
  codeDescription: StringFilterInput
  contactDescription: StringFilterInput
  createdAt: DateTimeFilterInput
  featuredArtPosts: PostFiltersInput
  featuredIdeaArticles: ArticleFiltersInput
  ideasDescription: StringFilterInput
  not: LandingPageFiltersInput
  or: [LandingPageFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input LandingPageInput {
  artDescription: String
  author: ID
  codeDescription: String
  contactDescription: String
  featuredArtPosts: [ID]
  featuredIdeaArticles: [ID]
  ideasDescription: String
  publishedAt: DateTime
}

type LandingPageRelationResponseCollection {
  data: [LandingPageEntity!]!
}

type Link {
  createdAt: DateTime
  description: String
  icon: UploadFileEntityResponse
  link: String!
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
  title: String!
  updatedAt: DateTime
}

type LinkEntity {
  attributes: Link
  id: ID
}

type LinkEntityResponse {
  data: LinkEntity
}

type LinkEntityResponseCollection {
  data: [LinkEntity!]!
  meta: ResponseCollectionMeta!
}

input LinkFiltersInput {
  and: [LinkFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  link: StringFilterInput
  not: LinkFiltersInput
  or: [LinkFiltersInput]
  tags: TagFiltersInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input LinkInput {
  description: String
  icon: ID
  link: String
  tags: [ID]
  title: String
}

type LinkRelationResponseCollection {
  data: [LinkEntity!]!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createArticle(data: ArticleInput!): ArticleEntityResponse
  createAuthor(data: AuthorInput!): AuthorEntityResponse
  createLink(data: LinkInput!): LinkEntityResponse
  createPost(data: PostInput!): PostEntityResponse
  createQuote(data: QuoteInput!): QuoteEntityResponse
  createTag(data: TagInput!): TagEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteArtPage: ArtPageEntityResponse
  deleteArticle(id: ID!): ArticleEntityResponse
  deleteAuthor(id: ID!): AuthorEntityResponse
  deleteFindMeOnLinkList: FindMeOnLinkListEntityResponse
  deleteIdeasPage: IdeasPageEntityResponse
  deleteLandingPage: LandingPageEntityResponse
  deleteLink(id: ID!): LinkEntityResponse
  deletePost(id: ID!): PostEntityResponse
  deleteQuote(id: ID!): QuoteEntityResponse
  deleteTag(id: ID!): TagEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateArtPage(data: ArtPageInput!): ArtPageEntityResponse
  updateArticle(data: ArticleInput!, id: ID!): ArticleEntityResponse
  updateAuthor(data: AuthorInput!, id: ID!): AuthorEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateFindMeOnLinkList(data: FindMeOnLinkListInput!): FindMeOnLinkListEntityResponse
  updateIdeasPage(data: IdeasPageInput!): IdeasPageEntityResponse
  updateLandingPage(data: LandingPageInput!): LandingPageEntityResponse
  updateLink(data: LinkInput!, id: ID!): LinkEntityResponse
  updatePost(data: PostInput!, id: ID!): PostEntityResponse
  updateQuote(data: QuoteInput!, id: ID!): QuoteEntityResponse
  updateTag(data: TagInput!, id: ID!): TagEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Post {
  author: AuthorEntityResponse
  content: UploadFileEntityResponse
  createdAt: DateTime
  gallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  link: String
  message: String
  publishedAt: DateTime
  slug: String
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
  title: String!
  updatedAt: DateTime
}

type PostEntity {
  attributes: Post
  id: ID
}

type PostEntityResponse {
  data: PostEntity
}

type PostEntityResponseCollection {
  data: [PostEntity!]!
  meta: ResponseCollectionMeta!
}

input PostFiltersInput {
  and: [PostFiltersInput]
  author: AuthorFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  link: StringFilterInput
  message: StringFilterInput
  not: PostFiltersInput
  or: [PostFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  tags: TagFiltersInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input PostInput {
  author: ID
  content: ID
  gallery: [ID]
  link: String
  message: String
  publishedAt: DateTime
  slug: String
  tags: [ID]
  title: String
}

type PostRelationResponseCollection {
  data: [PostEntity!]!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  artPage(publicationState: PublicationState = LIVE): ArtPageEntityResponse
  article(id: ID): ArticleEntityResponse
  articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleEntityResponseCollection
  author(id: ID): AuthorEntityResponse
  authors(filters: AuthorFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): AuthorEntityResponseCollection
  findMeOnLinkList: FindMeOnLinkListEntityResponse
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  ideasPage(publicationState: PublicationState = LIVE): IdeasPageEntityResponse
  landingPage(publicationState: PublicationState = LIVE): LandingPageEntityResponse
  link(id: ID): LinkEntityResponse
  links(filters: LinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): LinkEntityResponseCollection
  me: UsersPermissionsMe
  post(id: ID): PostEntityResponse
  posts(filters: PostFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PostEntityResponseCollection
  quote(id: ID): QuoteEntityResponse
  quotes(filters: QuoteFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): QuoteEntityResponseCollection
  tag(id: ID): TagEntityResponse
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type Quote {
  author: String!
  context: String
  createdAt: DateTime
  link: String
  quote: String!
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
  updatedAt: DateTime
}

type QuoteEntity {
  attributes: Quote
  id: ID
}

type QuoteEntityResponse {
  data: QuoteEntity
}

type QuoteEntityResponseCollection {
  data: [QuoteEntity!]!
  meta: ResponseCollectionMeta!
}

input QuoteFiltersInput {
  and: [QuoteFiltersInput]
  author: StringFilterInput
  context: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  link: StringFilterInput
  not: QuoteFiltersInput
  or: [QuoteFiltersInput]
  quote: StringFilterInput
  tags: TagFiltersInput
  updatedAt: DateTimeFilterInput
}

input QuoteInput {
  author: String
  context: String
  link: String
  quote: String
  tags: [ID]
}

type QuoteRelationResponseCollection {
  data: [QuoteEntity!]!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

type Tag {
  articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleRelationResponseCollection
  color: String
  createdAt: DateTime
  links(filters: LinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): LinkRelationResponseCollection
  name: String!
  posts(filters: PostFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PostRelationResponseCollection
  quotes(filters: QuoteFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): QuoteRelationResponseCollection
  updatedAt: DateTime
}

type TagEntity {
  attributes: Tag
  id: ID
}

type TagEntityResponse {
  data: TagEntity
}

type TagEntityResponseCollection {
  data: [TagEntity!]!
  meta: ResponseCollectionMeta!
}

input TagFiltersInput {
  and: [TagFiltersInput]
  articles: ArticleFiltersInput
  color: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  links: LinkFiltersInput
  name: StringFilterInput
  not: TagFiltersInput
  or: [TagFiltersInput]
  posts: PostFiltersInput
  quotes: QuoteFiltersInput
  updatedAt: DateTimeFilterInput
}

input TagInput {
  articles: [ID]
  color: String
  links: [ID]
  name: String
  posts: [ID]
  quotes: [ID]
}

type TagRelationResponseCollection {
  data: [TagEntity!]!
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  blurhash: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  blurhash: StringFilterInput
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  blurhash: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
