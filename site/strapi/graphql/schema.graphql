# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# The `Upload` scalar type represents a file upload.
scalar Upload

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

enum ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK {
  Facebook
  Twitter
}

input ComponentSharedMetaSocialFiltersInput {
  socialNetwork: StringFilterInput
  title: StringFilterInput
  description: StringFilterInput
  and: [ComponentSharedMetaSocialFiltersInput]
  or: [ComponentSharedMetaSocialFiltersInput]
  not: ComponentSharedMetaSocialFiltersInput
}

type ComponentSharedMetaSocial {
  id: ID!
  socialNetwork: ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK!
  title: String!
  description: String!
  image: UploadFileEntityResponse
}

type ComponentSharedSeo {
  id: ID!
  metaTitle: String!
  metaDescription: String!
  metaImage: UploadFileEntityResponse!
  metaSocial(
    filters: ComponentSharedMetaSocialFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentSharedMetaSocial]
  keywords: String
  metaRobots: String
  structuredData: JSON
  metaViewport: String
  canonicalURL: String
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  blurhash: StringFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  folder: ID
  folderPath: String
  blurhash: String
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
  blurhash: String
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

input UploadFolderFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  pathId: IntFilterInput
  parent: UploadFolderFiltersInput
  children: UploadFolderFiltersInput
  files: UploadFileFiltersInput
  path: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFolderFiltersInput]
  or: [UploadFolderFiltersInput]
  not: UploadFolderFiltersInput
}

input UploadFolderInput {
  name: String
  pathId: Int
  parent: ID
  children: [ID]
  files: [ID]
  path: String
}

type UploadFolder {
  name: String!
  pathId: Int!
  parent: UploadFolderEntityResponse
  children(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderRelationResponseCollection
  files(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  path: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFolderEntity {
  id: ID
  attributes: UploadFolder
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input ArticleFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  slug: StringFilterInput
  body: StringFilterInput
  tags: TagFiltersInput
  author: AuthorFiltersInput
  description: StringFilterInput
  publishDtm: DateTimeFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [ArticleFiltersInput]
  or: [ArticleFiltersInput]
  not: ArticleFiltersInput
}

input ArticleInput {
  title: String
  slug: String
  cover: ID
  body: String
  gallery: [ID]
  tags: [ID]
  author: ID
  description: String
  publishDtm: DateTime
  publishedAt: DateTime
}

type Article {
  title: String!
  slug: String!
  cover: UploadFileEntityResponse
  body: String!
  gallery(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TagRelationResponseCollection
  author: AuthorEntityResponse
  description: String!
  publishDtm: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type ArticleEntity {
  id: ID
  attributes: Article
}

type ArticleEntityResponse {
  data: ArticleEntity
}

type ArticleEntityResponseCollection {
  data: [ArticleEntity!]!
  meta: ResponseCollectionMeta!
}

type ArticleRelationResponseCollection {
  data: [ArticleEntity!]!
}

input AuthorFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [AuthorFiltersInput]
  or: [AuthorFiltersInput]
  not: AuthorFiltersInput
}

input AuthorInput {
  name: String
  avatar: ID
}

type Author {
  name: String!
  avatar: UploadFileEntityResponse!
  createdAt: DateTime
  updatedAt: DateTime
}

type AuthorEntity {
  id: ID
  attributes: Author
}

type AuthorEntityResponse {
  data: AuthorEntity
}

type AuthorEntityResponseCollection {
  data: [AuthorEntity!]!
  meta: ResponseCollectionMeta!
}

input LandingPageInput {
  codeDescription: String
  artDescription: String
  ideasDescription: String
  featuredArtPosts: [ID]
  featuredIdeaArticles: [ID]
  author: ID
  contactDescription: String
  publishedAt: DateTime
}

type LandingPage {
  codeDescription: String
  artDescription: String
  ideasDescription: String
  featuredArtPosts(
    filters: PostFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): PostRelationResponseCollection
  featuredIdeaArticles(
    filters: ArticleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ArticleRelationResponseCollection
  author: AuthorEntityResponse
  contactDescription: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type LandingPageEntity {
  id: ID
  attributes: LandingPage
}

type LandingPageEntityResponse {
  data: LandingPageEntity
}

input LinkFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  description: StringFilterInput
  link: StringFilterInput
  tags: TagFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [LinkFiltersInput]
  or: [LinkFiltersInput]
  not: LinkFiltersInput
}

input LinkInput {
  title: String
  description: String
  link: String
  image: ID
  tags: [ID]
}

type Link {
  title: String!
  description: String
  link: String
  image: UploadFileEntityResponse
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TagRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type LinkEntity {
  id: ID
  attributes: Link
}

type LinkEntityResponse {
  data: LinkEntity
}

type LinkEntityResponseCollection {
  data: [LinkEntity!]!
  meta: ResponseCollectionMeta!
}

type LinkRelationResponseCollection {
  data: [LinkEntity!]!
}

input PostFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  message: StringFilterInput
  link: StringFilterInput
  tags: TagFiltersInput
  slug: StringFilterInput
  author: AuthorFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [PostFiltersInput]
  or: [PostFiltersInput]
  not: PostFiltersInput
}

input PostInput {
  title: String
  message: String
  content: ID
  link: String
  tags: [ID]
  slug: String
  author: ID
  publishedAt: DateTime
}

type Post {
  title: String!
  message: String
  content: UploadFileEntityResponse
  link: String
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TagRelationResponseCollection
  slug: String
  author: AuthorEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type PostEntity {
  id: ID
  attributes: Post
}

type PostEntityResponse {
  data: PostEntity
}

type PostEntityResponseCollection {
  data: [PostEntity!]!
  meta: ResponseCollectionMeta!
}

type PostRelationResponseCollection {
  data: [PostEntity!]!
}

input QuoteFiltersInput {
  id: IDFilterInput
  quote: StringFilterInput
  author: StringFilterInput
  context: StringFilterInput
  link: StringFilterInput
  tags: TagFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [QuoteFiltersInput]
  or: [QuoteFiltersInput]
  not: QuoteFiltersInput
}

input QuoteInput {
  quote: String
  author: String
  context: String
  link: String
  tags: [ID]
}

type Quote {
  quote: String!
  author: String!
  context: String
  link: String
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TagRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type QuoteEntity {
  id: ID
  attributes: Quote
}

type QuoteEntityResponse {
  data: QuoteEntity
}

type QuoteEntityResponseCollection {
  data: [QuoteEntity!]!
  meta: ResponseCollectionMeta!
}

type QuoteRelationResponseCollection {
  data: [QuoteEntity!]!
}

input TagFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  color: StringFilterInput
  posts: PostFiltersInput
  articles: ArticleFiltersInput
  links: LinkFiltersInput
  quotes: QuoteFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [TagFiltersInput]
  or: [TagFiltersInput]
  not: TagFiltersInput
}

input TagInput {
  name: String
  color: String
  posts: [ID]
  articles: [ID]
  links: [ID]
  quotes: [ID]
}

type Tag {
  name: String!
  color: String
  posts(
    filters: PostFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): PostRelationResponseCollection
  articles(
    filters: ArticleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ArticleRelationResponseCollection
  links(
    filters: LinkFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): LinkRelationResponseCollection
  quotes(
    filters: QuoteFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): QuoteRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type TagEntity {
  id: ID
  attributes: Tag
}

type TagEntityResponse {
  data: TagEntity
}

type TagEntityResponseCollection {
  data: [TagEntity!]!
  meta: ResponseCollectionMeta!
}

type TagRelationResponseCollection {
  data: [TagEntity!]!
}

union GenericMorph =
  ComponentSharedMetaSocial
  | ComponentSharedSeo
  | UploadFile
  | UploadFolder
  | I18NLocale
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser
  | Article
  | Author
  | LandingPage
  | Link
  | Post
  | Quote
  | Tag

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
  article(id: ID): ArticleEntityResponse
  articles(
    filters: ArticleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ArticleEntityResponseCollection
  author(id: ID): AuthorEntityResponse
  authors(
    filters: AuthorFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AuthorEntityResponseCollection
  landingPage(
    publicationState: PublicationState = LIVE
  ): LandingPageEntityResponse
  link(id: ID): LinkEntityResponse
  links(
    filters: LinkFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): LinkEntityResponseCollection
  post(id: ID): PostEntityResponse
  posts(
    filters: PostFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): PostEntityResponseCollection
  quote(id: ID): QuoteEntityResponse
  quotes(
    filters: QuoteFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): QuoteEntityResponseCollection
  tag(id: ID): TagEntityResponse
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TagEntityResponseCollection
  me: UsersPermissionsMe
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  updateUploadFolder(
    id: ID!
    data: UploadFolderInput!
  ): UploadFolderEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  createArticle(data: ArticleInput!): ArticleEntityResponse
  updateArticle(id: ID!, data: ArticleInput!): ArticleEntityResponse
  deleteArticle(id: ID!): ArticleEntityResponse
  createAuthor(data: AuthorInput!): AuthorEntityResponse
  updateAuthor(id: ID!, data: AuthorInput!): AuthorEntityResponse
  deleteAuthor(id: ID!): AuthorEntityResponse
  updateLandingPage(data: LandingPageInput!): LandingPageEntityResponse
  deleteLandingPage: LandingPageEntityResponse
  createLink(data: LinkInput!): LinkEntityResponse
  updateLink(id: ID!, data: LinkInput!): LinkEntityResponse
  deleteLink(id: ID!): LinkEntityResponse
  createPost(data: PostInput!): PostEntityResponse
  updatePost(id: ID!, data: PostInput!): PostEntityResponse
  deletePost(id: ID!): PostEntityResponse
  createQuote(data: QuoteInput!): QuoteEntityResponse
  updateQuote(id: ID!, data: QuoteInput!): QuoteEntityResponse
  deleteQuote(id: ID!): QuoteEntityResponse
  createTag(data: TagInput!): TagEntityResponse
  updateTag(id: ID!, data: TagInput!): TagEntityResponse
  deleteTag(id: ID!): TagEntityResponse
  upload(
    refId: ID
    ref: String
    field: String
    info: FileInfoInput
    file: Upload!
  ): UploadFileEntityResponse!
  multipleUpload(
    refId: ID
    ref: String
    field: String
    files: [Upload]!
  ): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse

  # Create a new role
  createUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsCreateRolePayload

  # Update an existing role
  updateUsersPermissionsRole(
    id: ID!
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsUpdateRolePayload

  # Delete an existing role
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  # Create a new user
  createUsersPermissionsUser(
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Update an existing user
  updateUsersPermissionsUser(
    id: ID!
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Delete an existing user
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  # Register a user
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  # Request a reset password token
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  # Reset user password. Confirm with a code (resetToken from forgotPassword)
  resetPassword(
    password: String!
    passwordConfirmation: String!
    code: String!
  ): UsersPermissionsLoginPayload

  # Change user password. Confirm with the current password.
  changePassword(
    currentPassword: String!
    password: String!
    passwordConfirmation: String!
  ): UsersPermissionsLoginPayload

  # Confirm an email users email address
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
