/* eslint-disable */
import * as types from "./graphql";
import { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
  "\n  query GetArticles {\n    articles {\n      data {\n        id\n        attributes {\n          title\n          slug\n          cover {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          description\n          body\n          gallery {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          tags {\n            data {\n              attributes {\n                name\n                color\n              }\n            }\n          }\n          author {\n            data {\n              attributes {\n                name\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                    }\n                  }\n                }\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          publishDtm\n        }\n      }\n    }\n  }\n":
    types.GetArticlesDocument,
  "\n  query GetArticleById($id: ID!) {\n    article(id: $id) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          cover {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          description\n          body\n          gallery {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          tags {\n            data {\n              attributes {\n                name\n                color\n              }\n            }\n          }\n          author {\n            data {\n              attributes {\n                name\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                    }\n                  }\n                }\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          publishDtm\n        }\n      }\n    }\n  }\n":
    types.GetArticleByIdDocument,
  "\n  query GetArticleBySlug($slug: String!) {\n    articles(filters: { slug: { eq: $slug } }) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          cover {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          description\n          body\n          gallery {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          tags {\n            data {\n              attributes {\n                name\n                color\n              }\n            }\n          }\n          author {\n            data {\n              attributes {\n                name\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                    }\n                  }\n                }\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          publishDtm\n        }\n      }\n    }\n  }\n":
    types.GetArticleBySlugDocument,
  "\n  query GetLandingPage {\n    landingPage {\n      data {\n        attributes {\n          codeDescription\n          artDescription\n          ideasDescription\n          featuredArtPosts {\n            data {\n              attributes {\n                slug\n              }\n            }\n          }\n          featuredIdeaArticles {\n            data {\n              attributes {\n                slug\n              }\n            }\n          }\n          author {\n            data {\n              attributes {\n                name\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                      alternativeText\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n":
    types.GetLandingPageDocument,
  "\n  query GetPosts {\n    posts {\n      data {\n        id\n        attributes {\n          author {\n            data {\n              attributes {\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                      alternativeText\n                    }\n                  }\n                }\n                name\n              }\n            }\n          }\n          link\n          message\n          slug\n          title\n          content {\n            data {\n              attributes {\n                url\n                blurhash\n                alternativeText\n              }\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n":
    types.GetPostsDocument,
  "\n  query GetPostBySlug($slug: String!) {\n    posts(filters: { slug: { eq: $slug } }) {\n      data {\n        id\n        attributes {\n          author {\n            data {\n              attributes {\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                      alternativeText\n                    }\n                  }\n                }\n                name\n              }\n            }\n          }\n          link\n          message\n          slug\n          title\n          content {\n            data {\n              attributes {\n                url\n                blurhash\n                alternativeText\n              }\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n":
    types.GetPostBySlugDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetArticles {\n    articles {\n      data {\n        id\n        attributes {\n          title\n          slug\n          cover {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          description\n          body\n          gallery {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          tags {\n            data {\n              attributes {\n                name\n                color\n              }\n            }\n          }\n          author {\n            data {\n              attributes {\n                name\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                    }\n                  }\n                }\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          publishDtm\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query GetArticles {\n    articles {\n      data {\n        id\n        attributes {\n          title\n          slug\n          cover {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          description\n          body\n          gallery {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          tags {\n            data {\n              attributes {\n                name\n                color\n              }\n            }\n          }\n          author {\n            data {\n              attributes {\n                name\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                    }\n                  }\n                }\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          publishDtm\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetArticleById($id: ID!) {\n    article(id: $id) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          cover {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          description\n          body\n          gallery {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          tags {\n            data {\n              attributes {\n                name\n                color\n              }\n            }\n          }\n          author {\n            data {\n              attributes {\n                name\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                    }\n                  }\n                }\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          publishDtm\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query GetArticleById($id: ID!) {\n    article(id: $id) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          cover {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          description\n          body\n          gallery {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          tags {\n            data {\n              attributes {\n                name\n                color\n              }\n            }\n          }\n          author {\n            data {\n              attributes {\n                name\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                    }\n                  }\n                }\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          publishDtm\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetArticleBySlug($slug: String!) {\n    articles(filters: { slug: { eq: $slug } }) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          cover {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          description\n          body\n          gallery {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          tags {\n            data {\n              attributes {\n                name\n                color\n              }\n            }\n          }\n          author {\n            data {\n              attributes {\n                name\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                    }\n                  }\n                }\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          publishDtm\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query GetArticleBySlug($slug: String!) {\n    articles(filters: { slug: { eq: $slug } }) {\n      data {\n        id\n        attributes {\n          title\n          slug\n          cover {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          description\n          body\n          gallery {\n            data {\n              attributes {\n                name\n                alternativeText\n                url\n                blurhash\n              }\n            }\n          }\n          tags {\n            data {\n              attributes {\n                name\n                color\n              }\n            }\n          }\n          author {\n            data {\n              attributes {\n                name\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                    }\n                  }\n                }\n              }\n            }\n          }\n          createdAt\n          updatedAt\n          publishDtm\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetLandingPage {\n    landingPage {\n      data {\n        attributes {\n          codeDescription\n          artDescription\n          ideasDescription\n          featuredArtPosts {\n            data {\n              attributes {\n                slug\n              }\n            }\n          }\n          featuredIdeaArticles {\n            data {\n              attributes {\n                slug\n              }\n            }\n          }\n          author {\n            data {\n              attributes {\n                name\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                      alternativeText\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query GetLandingPage {\n    landingPage {\n      data {\n        attributes {\n          codeDescription\n          artDescription\n          ideasDescription\n          featuredArtPosts {\n            data {\n              attributes {\n                slug\n              }\n            }\n          }\n          featuredIdeaArticles {\n            data {\n              attributes {\n                slug\n              }\n            }\n          }\n          author {\n            data {\n              attributes {\n                name\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                      alternativeText\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetPosts {\n    posts {\n      data {\n        id\n        attributes {\n          author {\n            data {\n              attributes {\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                      alternativeText\n                    }\n                  }\n                }\n                name\n              }\n            }\n          }\n          link\n          message\n          slug\n          title\n          content {\n            data {\n              attributes {\n                url\n                blurhash\n                alternativeText\n              }\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query GetPosts {\n    posts {\n      data {\n        id\n        attributes {\n          author {\n            data {\n              attributes {\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                      alternativeText\n                    }\n                  }\n                }\n                name\n              }\n            }\n          }\n          link\n          message\n          slug\n          title\n          content {\n            data {\n              attributes {\n                url\n                blurhash\n                alternativeText\n              }\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetPostBySlug($slug: String!) {\n    posts(filters: { slug: { eq: $slug } }) {\n      data {\n        id\n        attributes {\n          author {\n            data {\n              attributes {\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                      alternativeText\n                    }\n                  }\n                }\n                name\n              }\n            }\n          }\n          link\n          message\n          slug\n          title\n          content {\n            data {\n              attributes {\n                url\n                blurhash\n                alternativeText\n              }\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  query GetPostBySlug($slug: String!) {\n    posts(filters: { slug: { eq: $slug } }) {\n      data {\n        id\n        attributes {\n          author {\n            data {\n              attributes {\n                avatar {\n                  data {\n                    attributes {\n                      url\n                      blurhash\n                      alternativeText\n                    }\n                  }\n                }\n                name\n              }\n            }\n          }\n          link\n          message\n          slug\n          title\n          content {\n            data {\n              attributes {\n                url\n                blurhash\n                alternativeText\n              }\n            }\n          }\n          createdAt\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
